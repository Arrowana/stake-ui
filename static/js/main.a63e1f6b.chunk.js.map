{"version":3,"sources":["skin/index.ts","utils/idl.ts","store/actions.ts","components/rewards/RewardsList.tsx","components/multisig/Multisig.tsx","utils/tokens.tsx","idl/lockup.ts","idl/registry.ts","idl/multisig.ts","components/common/WalletProvider.tsx","components/Stake.tsx","components/common/Notification.tsx","utils/registry.ts","store/reducer.ts","store/index.ts","components/common/BootstrapProvider.tsx","components/common/Header.tsx","components/common/Footer.tsx","components/common/Layout.tsx","components/common/RegistrarSelect.tsx","components/Me.tsx","utils/lockup.ts","components/rewards/DropRewardButton.tsx","components/common/MyNode.tsx","components/rewards/ClaimRewardButton.tsx","components/rewards/Rewards.tsx","components/common/VestingAccountsSelect.tsx","pages/MyNode.tsx","components/lockups/NewVesting.tsx","components/lockups/VestingAccountCard.tsx","components/lockups/Vestings.tsx","pages/Lockup.tsx","pages/Multisig.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/common/OwnedTokenAccountsSelect.tsx","store/config.ts"],"names":["_skin","active","ready","notReady","inactive","deactivating","instance","IDL_INSTRUCTION_LAYOUT","rustEnum","struct","encodeInstruction","i","buffer","Buffer","alloc","len","encode","concat","IDL_TAG","slice","from","reverse","ActionType","RewardsList","props","rewards","loading","forEach","r","style","display","marginLeft","marginRight","length","filter","vendor","account","expired","map","RewardListItem","rli","primary","useState","open","setOpen","dateLabel","Date","startTs","toNumber","toLocaleString","fromLabel","toString","button","onClick","visibility","reward","locked","justifyContent","color","needsClaim","toDisplay","total","mint","decimals","publicKey","secondary","in","timeout","unmountOnExit","undefined","RewardListItemDetails","registryClient","useWallet","useSnackbar","enqueueSnackbar","closeSnackbar","useSelector","state","registrar","registry","vendorMint","accounts","expiryReceiverToken","setExpiryReceiverToken","expire","a","variant","PublicKey","createProgramAddress","toBuffer","nonce","programId","vendorSigner","rpc","expireReward","vault","expiryReceiver","tokenProgram","TokenInstructions","TOKEN_PROGRAM_ID","clock","SYSVAR_CLOCK_PUBKEY","tx","action","signature","poolTokenSupply","expiryTs","toLocaleDateString","rewardEventQCursor","now","provider","wallet","equals","flexDirection","flex","onChange","f","RewardListItemViewModel","cursor","ctx","event","member","sptAccount","balances","spt","lockedSptAccount","balancesLocked","ownsPoolShares","amount","notYetClaimed","rewardsCursor","isEligible","lastStakeTs","vendorProgramAccount","Multisig","multisig","history","useHistory","multisigAddress","setMultisigAddress","disabled","addr","_","isValidPubkey","searchFn","push","paddingLeft","paddingRight","borderBottom","background","padding","border","outlineWidth","placeholder","value","e","target","onKeyPress","key","NewMultisigButton","MultisigInstance","multisigClient","multisigAccount","setMultisigAccount","transactions","setTransactions","showSignerDialog","setShowSignerDialog","showAddTransactionDialog","setShowAddTransactionDialog","forceRefresh","setForceRefresh","useEffect","then","catch","err","console","error","transaction","all","txs","subscribe","on","fixed","maxWidth","marginBottom","marginTop","textAlign","position","elevation","flexGrow","component","threshold","owners","title","arrow","disablePadding","TxListItem","AddTransactionDialog","onClose","didAddTransaction","SignerDialog","NewMultisigDialog","setThreshold","zeroAddr","participants","setParticipants","_onClose","createMultisig","Account","ownerSize","multisigSize","findProgramAddress","p","BN","rent","SYSVAR_RENT_PUBKEY","createInstruction","signers","instructions","fullWidth","label","type","parseInt","idx","str","txAccount","setTxAccount","rows","field","didExecute","wordBreak","width","float","encodeBase64","data","ownerSetSeqno","msAccountRows","owner","approve","execute","multisigSigner","executeTransaction","remainingAccounts","t","pubkey","isSigner","isWritable","icon","ixLabel","errStr","align","AccountsList","BPF_LOADER_UPGRADEABLE_PID","coder","sighash","idl","signer","setSigner","addrNonce","paddingBottom","ProgramUpdateListItem","IdlUpgradeListItem","MultisigSetOwnersListItem","ChangeThresholdListItem","ChangeThresholdListItemDetails","changeThreshold","changeThresholdData","proposer","createTransaction","SetOwnersListItemDetails","setOwners","setOwnersData","UpgradeIdlListItemDetails","setProgramId","setBuffer","createTransactionAccount","programAddr","bufferAddr","anchor","idlAddress","idlAddr","accs","UpgradeProgramListItemDetails","connection","getAccountInfo","programAccount","Error","programdataAddress","spill","instruction","TokenListContext","React","createContext","tokenMap","Map","useTokenInfos","useContext","TokenRegistryProvider","setTokenMap","TokenListProvider","resolve","tokens","tokenList","filterByClusterSlug","getList","reduce","item","set","address","Provider","children","fromDisplay","toDisplayLabel","whitelistedMint","Object","keys","networks","mainnet","mints","pop","toUpperCase","version","name","isMut","args","option","defined","kind","fields","vec","methods","types","errors","code","msg","variants","w","WalletContext","WalletProvider","wallets","useMemo","getPhantomWallet","getSolflareWallet","getSolletWallet","WalletProviderInner","solWallet","useSolana","walletProvider","common","network","opts","preflightCommitment","commitment","Connection","url","Wallet","adapter","lockupClient","Program","LockupIdl","lockupProgramId","RegistryIdl","registryProgramId","MultisigIdl","multisigProgramId","this","cb","connect","disconnect","signTransaction","signAllTransactions","Stake","dispatch","useDispatch","registrarAccount","memberAccount","createPoolTokens","isLocked","poolMint","u64","rewardEventQ","memberSigner","registrarSigner","beneficiary","stake","redeemPoolTokens","pendingWithdrawal","startUnstake","pwAccount","RegistryCreatePendingWithdrawal","createPool","shares","redeemPool","PoolCard","create","redeem","RedemptionList","AllPendingTransfers","poolAmount","setPoolAmount","setIsLocked","poolTokenMint","pricePerShare","stakeRate","cost","mul","subheader","fontWeight","supply","withdrawalTimelock","control","checked","labelPlacement","pendingWithdrawals","pw","RegistrySetPendingWithdrawals","paddingTop","fontSize","PendingStakeListItem","isLast","sptLabel","l","overflow","whiteSpace","PendingWithdrawalButton","endTs","pool","endPendingWithdrawal","vaultPw","endUnstake","updatedPendingWithdrawal","burned","RegistryUpdatePendingWithdrawal","skin","height","mintAccount","pendingTransfers","setPendingTransfers","transfers","sort","b","fetchAll","maxHeight","div","withTx","snack","beforeLabel","afterLabel","execTx","ViewTransactionOnExplorerButton","explorerClusterSuffix","urlSuffix","rel","href","memberSeed","sha256","seed","createBalanceSandbox","registrySigner","vaultStake","getMinimumBalanceForRentExemption","lamports","serumCmn","createSptIx","createVaultIx","createVaultStakeIx","createVaultPwIx","tx0","Transaction","add","rewardEvents","rewardQ","events","tail","head","BootstrapState","initialState","bootstrapTrigger","shutdownTrigger","isWalletConnected","bootstrapState","NeedsBootstrap","ownedTokenAccounts","lockup","vestings","registrars","srm","store","createStore","newState","CommonAppWillBootstrap","IsBootstrapping","CommonAppDidBootstrap","Bootstrapped","CommonWalletSetProvider","CommonWalletDidConnect","CommonWalletDidDisconnect","CommonSetNetwork","networkKey","values","CommonTriggerBootstrap","CommonTriggerShutdown","CommonDidShutdown","s","CommonOwnedTokenAccountsSet","CommonOwnedTokenAccountsUpdate","LockupSetVestings","vestingAccounts","LockupUpdateVesting","vesting","LockupCreateVesting","unshift","RegistrySetMember","RegistrySetRegistrar","AccountAdd","AccountUpdate","BootstrapProvider","bootstrap","useCallback","autoHideDuration","refreshAccounts","members","accountStore","fromEntries","m","registrarSwitch","shutdown","fetchRegistrars","registrarAddresses","getMultipleAccounts","raw","decode","parseMintAccount","rewardQs","fetchMembers","Promise","createWithSeed","memberPublicKey","memberAddresses","memberAccounts","fetchAndDispatchMemberAccounts","fetchMints","mintAddresses","fetchOwnedTokenAccounts","getOwnedTokenAccounts","fetchVestingAccounts","v","newRegistrar","oldRegistrar","oldMember","oldMemberAccount","newMember","newMemberAccount","subscribeRegistrar","subscribeMember","oldRegistrarAccount","rewardQueue","unsubscribe","newRegistrarAccount","onAccountChange","acc","createVaultSubscription","tokenAccount","parseTokenAccount","filters","getOwnedAccountsFilters","getProgramAccounts","resp","result","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","Header","isAppReady","isRefreshing","setIsRefreshing","AppBar","boxShadow","Toolbar","SerumLogoButton","BarButton","hrefClient","srmFaucet","CircularProgress","IconButton","NetworkSelector","WalletConnectButton","Button","alt","src","Link","textDecoration","Typography","anchorEl","setAnchorEl","handleClose","currentTarget","Menu","Boolean","n","MenuItem","showDisconnect","Footer","zIndex","bottom","backgroundColor","borderTop","FooterButton","isEnd","Layout","refresh","setRefresh","minHeight","RiskBar","window","localStorage","getItem","DisconnectedSplash","RiskDisclosureForm","onConsent","setItem","useStyles","makeStyles","theme","root","spacing","classes","isDisconnected","className","LinearProgress","activeRegistrar","RegistrarSelect","selectedRegistrar","tokenInfos","Select","getImage","get","registrarToDisplayLabel","entry","token","logoURI","Me","MemberBalancesCard","lockedVault","lockedVaultStake","lockedVaultPw","lockedSpt","tables","description","balance","pending","Card","CardContent","BalanceTable","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","row","scope","vestingSigner","availableForWithdrawal","setSigners","simulateTransaction","log","logs","JSON","parse","RewardTypeViewModel","TabModel","DropRewardButton","showDialog","setShowDialog","DropRewardDialog","Unlocked","rewardTypeTab","setRewardTypeTab","Dialog","DialogTitle","DialogContent","Tabs","_e","Tab","Locked","DropUnlockedForm","DropLockedForm","rewardDisplayAmount","setRewardDisplayAmount","setExpiryTs","depositor","setDepositor","setMint","isSendEnabled","sendUnlockedReward","notification","lockedRewardAmount","rewardKind","unlocked","vendorVault","depositorAuthority","rewardVendor","dropReward","DropVendorForm","onCancel","setStartTs","setEndTs","periodCount","setPeriodCount","sendLockedRewards","rewardAmount","mintOptions","OwnedTokenAccountsSelect","FormHelperText","FormControl","InputLabel","TextField","id","InputLabelProps","shrink","parseFloat","InputProps","inputProps","min","d","getTime","DialogActions","ClaimRewardButton","setToken","clickHandler","_vendorSigner","vendoredVesting","vendoredVestingVault","vendoredVestingSigner","createVesting","meta","lockupProgram","cmn","createTokenAccountInstrs","claimRewardLocked","claimReward","to","unlockedAlloc","Rewards","rewardEventQueue","fromMessage","nextReward","shift","Paper","VestingAccountsSelect","deposit","fromAccount","setFromAccount","pk","availableAmount","outstanding","sub","whitelistOwned","MyNode","tab","setTab","MyNodeBanner","Container","showDepositDialog","setShowDepositDialog","showWithdrawDialog","setShowWithdrawDialog","createStakeAccount","memberSignerPublicKey","mainTx","lockedTx","SystemProgram","size","fromPubkey","newAccountPubkey","basePubkey","space","createAccountWithSeed","createMember","allTxs","sendAll","skipPreflight","txSigs","memberProgramAccount","HoverSpan","styled","DepositDialog","WithdrawDialog","TransferDialog","contextText","onTransfer","displayAmount","relayData","_memberSigner","_vestingSigner","relayAccounts","whitelistedProgram","whitelistedProgramVault","whitelistedProgramVaultAuthority","transfer","whitelistWithdraw","updatedVestingAccount","getTokenAccount","whitelistDeposit","withdraw","setDisplayAmount","setFrom","setVesting","maxDisplayAmount","setMaxDisplayAmount","submitBtnDisabled","TransitionComponent","Transition","keepMounted","FormControlLabel","Switch","max","_maxDisplayAmount","forwardRef","ref","Slide","direction","MyNodePage","NewVestingButton","NewVestingDialog","defaultStartDate","defaultStartTs","defaultEndDate","defaultEndTs","setBeneficiary","isValidBeneficiary","displayBeneficiaryError","startTimestamp","setStartTimestamp","timestamp","setTimestamp","isLoading","setIsLoading","submitBtnEnabled","createVestingClickHandler","beneficiaryPublicKey","beneficiaryAccount","vestingVault","vestingAccount","helperText","defaultValue","VestingAccountCard","expanded","setExpanded","hover","setHover","displayFn","input","outstandingLabel","tsOverflow","mod","shiftedStartTs","period","vestingDates","Array","formatDate","rewardOverflow","startBalance","rewardPerPeriod","cumulativeVesting","k","startLabel","endLabel","setAvailableForWithdrawal","withdrawalAccount","setWithdrawalAccount","_availableForWithdrawal","withdrawEnabled","gtn","realizor","newVesting","program","metadata","grantor","onMouseOver","onMouseOut","ListItem","ListItemIcon","ListItemText","Collapse","labels","series","options","axisY","FixedScaleAxis","low","high","ticks","lineSmooth","Interpolation","step","split","getMonth","getDate","getFullYear","Vestings","List","LockupPage","MultisigPage","MultisigInstancePage","path","useLocation","pathname","App","createMuiTheme","palette","default","typography","fontFamily","join","overrides","CssBaseline","maxSnack","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","ota","ownedTokenAccount","msrmFaucet","msrm","fida","dxl","devnet","token1","token2","localhost"],"mappings":"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NrG,KAAM,aAER,CACEqG,KAAM,cACNrG,KAAM,OAER,CACEqG,KAAM,eACNrG,KAAM,OAER,CACEqG,KAAM,YACNrG,KAAM,OAER,CACEqG,KAAM,UACNrG,KAAM,OAER,CACEqG,KAAM,QACNrG,KAAM,OAER,CACEqG,KAAM,cACNrG,KAAM,OAER,CACEqG,KAAM,iBACNrG,KAAM,OAER,CACEqG,KAAM,QACNrG,KAAM,MAER,CACEqG,KAAM,WACNrG,KAAM,CACJwG,OAAQ,CACNC,QAAS,kBAQvBK,MAAO,CACL,CACET,KAAM,WACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,UACNrG,KAAM,aAER,CACEqG,KAAM,WACNrG,KAAM,gBAKd,CACEqG,KAAM,iBACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,YACNrG,KAAM,iBAMhB+G,OAAQ,CACN,CACEC,KAAM,IACNX,KAAM,mBACNY,IAAK,gEAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,4DAEP,CACED,KAAM,IACNX,KAAM,uBACNY,IAAK,yDAEP,CACED,KAAM,IACNX,KAAM,wBACNY,IAAK,uDAEP,CACED,KAAM,IACNX,KAAM,wBACNY,IAAK,+DAEP,CACED,KAAM,IACNX,KAAM,oBACNY,IAAK,wBAEP,CACED,KAAM,IACNX,KAAM,qBACNY,IAAK,8BAEP,CACED,KAAM,IACNX,KAAM,gCACNY,IAAK,oCAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,qBAEP,CACED,KAAM,IACNX,KAAM,8BACNY,IAAK,kCAEP,CACED,KAAM,IACNX,KAAM,qCACNY,IAAK,0DAEP,CACED,KAAM,IACNX,KAAM,2BACNY,IAAK,sCAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,8CAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,8BAEP,CACED,KAAM,IACNX,KAAM,eACNY,IAAK,kEAEP,CACED,KAAM,IACNX,KAAM,8BACNY,IAAK,gEAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,8DAEP,CACED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aAER,CACEqG,KAAM,QACNrG,KAAM,OAER,CACEqG,KAAM,UACNrG,KAAM,QAER,CACEqG,KAAM,OACNrG,KAAM,CACJyG,QAAS,yBAOrBK,MAAO,CACL,CACET,KAAM,iBACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,MACNrG,KAAM,aAER,CACEqG,KAAM,QACNrG,KAAM,aAER,CACEqG,KAAM,aACNrG,KAAM,aAER,CACEqG,KAAM,UACNrG,KAAM,gBAKd,CACEqG,KAAM,cACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,SACNrG,KAAM,aAER,CACEqG,KAAM,KACNrG,KAAM,OAER,CACEqG,KAAM,SACNrG,KAAM,WAKd,CACEqG,KAAM,mBACNrG,KAAM,CACJ0G,KAAM,OACNQ,SAAU,CACR,CACEb,KAAM,YAER,CACEA,KAAM,SACNM,OAAQ,CACN,CACEN,KAAM,WACNrG,KAAM,OAER,CACEqG,KAAM,SACNrG,KAAM,OAER,CACEqG,KAAM,eACNrG,KAAM,aAQpB+G,OAAQ,CACN,CACEC,KAAM,IACNX,KAAM,4BACNY,IAAK,wDAEP,CACED,KAAM,IACNX,KAAM,eACNY,IAAK,2DAEP,CACED,KAAM,IACNX,KAAM,2BACNY,IAAK,+BAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,oDAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,2DAEP,CACED,KAAM,IACNX,KAAM,mBACNY,IAAK,sEAEP,CACED,KAAM,IACNX,KAAM,eACNY,IAAK,sDAEP,CACED,KAAM,IACNX,KAAM,oBACNY,IAAK,wBAEP,CACED,KAAM,IACNX,KAAM,UACNY,IAAK,iCAEP,CACED,KAAM,IACNX,KAAM,kBACNY,IAAK,6CAEP,CACED,KAAM,IACNX,KAAM,qBACNY,IAAK,mEAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,4DAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,uCAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,2CAEP,CACED,KAAM,IACNX,KAAM,sBA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","file":"static/js/main.a63e1f6b.chunk.js","sourcesContent":["type Skin = {\n  active: string;\n  ready: string;\n  inactive: string;\n  notReady: string;\n  deactivating: string;\n};\n\nconst _skin: Skin = {\n  active: '#43a047',\n  ready: '#3f51b5',\n  notReady: '#ccc',\n  inactive: 'red',\n  deactivating: 'rgb(255, 121, 42)',\n};\n\nexport function instance(): Skin {\n  return _skin;\n}\n","import { struct, Layout } from 'buffer-layout';\nimport { rustEnum } from '@project-serum/borsh';\n\n// Simplified since we only use the SetBuffer variant.\nexport type IdlInstruction =\n  | Create\n  | CreateBuffer\n  | Write\n  | SetBuffer\n  | SetAuthority;\n\ntype Create = {};\ntype CreateBuffer = {};\ntype Write = {};\ntype SetBuffer = {};\ntype SetAuthority = {};\n\nconst IDL_INSTRUCTION_LAYOUT: Layout<IdlInstruction> = rustEnum([\n  struct([], 'create'),\n  struct([], 'createBuffer'),\n  struct([], 'write'),\n  struct([], 'setBuffer'),\n  struct([], 'setAuthority'),\n]);\n\nexport function encodeInstruction(i: IdlInstruction): Buffer {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n}\n\n// Reverse for little endian.\nexport const IDL_TAG = Buffer.from('0a69e9a778bcf440', 'hex').reverse();\n","export type Action = {\n  type: ActionType;\n  item: any;\n};\n\nexport enum ActionType {\n  // Common.\n  CommonTriggerBootstrap,\n  CommonAppWillBootstrap,\n  CommonAppDidBootstrap,\n  CommonTriggerShutdown,\n  CommonDidShutdown,\n  CommonWalletDidConnect,\n  CommonWalletDidDisconnect,\n  CommonWalletSetProvider,\n  CommonSetNetwork,\n  CommonOwnedTokenAccountsSet,\n  CommonOwnedTokenAccountsUpdate,\n  CommonWalletReset,\n\n  // Lockup.\n  LockupSetVestings,\n  LockupUpdateVesting,\n  LockupCreateVesting,\n\n  // Registry.\n  RegistrySetMember,\n  RegistrySetRegistrar,\n  RegistrySetPendingWithdrawals,\n  RegistryCreatePendingWithdrawal,\n  RegistryUpdatePendingWithdrawal,\n\n  // Accounts.\n  AccountAdd,\n  AccountUpdate,\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { toDisplay } from '../../utils/tokens';\nimport { ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { State as StoreState } from '../../store/reducer';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\n\ntype RewardsListProps = {\n  rewards: (RewardListItemViewModel | null)[];\n};\n\nexport default function RewardsList(props: RewardsListProps) {\n  const { rewards } = props;\n  let loading = false;\n  rewards.forEach(r => {\n    if (r === null) {\n      loading = true;\n    }\n  });\n  return (\n    <List>\n      {loading ? (\n        <CircularProgress\n          style={{\n            display: 'block',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n        />\n      ) : rewards.length > 0 ? (\n        rewards\n          .filter(r => r!.vendor.account.expired === false)\n          .map(r => {\n            return <RewardListItem rli={r as RewardListItemViewModel} />;\n          })\n      ) : (\n        <ListItem>\n          <ListItemText primary={'No rewards found'} />\n        </ListItem>\n      )}\n    </List>\n  );\n}\n\ntype RewardListItemProps = {\n  rli: RewardListItemViewModel;\n};\n\nfunction RewardListItem(props: RewardListItemProps) {\n  const { rli } = props;\n\n  const [open, setOpen] = useState(false);\n\n  const dateLabel = new Date(\n    rli.vendor!.account.startTs.toNumber() * 1000,\n  ).toLocaleString();\n  let fromLabel = `Dropped by ${rli.vendor.account.from.toString()} | ${dateLabel}`;\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <LockIcon\n          style={{\n            visibility: rli.reward.locked ? 'visible' : 'hidden',\n            marginRight: '16px',\n          }}\n        />\n        <ListItemText\n          primary={\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                color: rli.needsClaim ? '#54a15e' : '',\n              }}\n            >\n              <div>{`${toDisplay(\n                rli.vendor.account.total,\n                rli.mint!.account.decimals,\n              )} ${rli.mint!.publicKey}`}</div>\n            </div>\n          }\n          secondary={fromLabel}\n        />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {rli.vendor === undefined ? (\n          <CircularProgress />\n        ) : (\n          <RewardListItemDetails vendor={rli.vendor!} />\n        )}\n      </Collapse>\n    </>\n  );\n}\n\ntype RewardListItemDetailsProps = {\n  vendor: ProgramAccount;\n};\n\nfunction RewardListItemDetails(props: RewardListItemDetailsProps) {\n  let { vendor } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { vendorMint, registrar } = useSelector((state: StoreState) => {\n    return {\n      registrar: state.registry.registrar,\n      vendorMint: state.accounts[vendor.account.mint.toString()],\n    };\n  });\n  const [\n    expiryReceiverToken,\n    setExpiryReceiverToken,\n  ] = useState<null | PublicKey>(null);\n  const expire = async () => {\n    enqueueSnackbar('Expiring reward', {\n      variant: 'info',\n    });\n    const vendorSigner = await PublicKey.createProgramAddress(\n      [\n        registrar.toBuffer(),\n        vendor.publicKey.toBuffer(),\n        Buffer.from([vendor.account.nonce]),\n      ],\n      registryClient.programId,\n    );\n\n    const tx = await registryClient.rpc.expireReward({\n      accounts: {\n        registrar,\n        vendor: vendor.publicKey,\n        vault: vendor.account.vault,\n        vendorSigner,\n        expiryReceiver: vendor.account.expiryReceiver,\n        expiryReceiverToken,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        clock: SYSVAR_CLOCK_PUBKEY,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Reward expired`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n    });\n  };\n  return (\n    <div\n      style={{\n        marginLeft: '56px',\n      }}\n    >\n      <div>Vendor</div>\n      <ul>\n        <li>Address {vendor.publicKey.toString()}</li>\n        <li>Vault: {vendor.account.vault.toString()}</li>\n        <li>Mint: {vendor.account.mint.toString()}</li>\n        <li>\n          Pool token supply snapshot:{' '}\n          {vendor.account.poolTokenSupply.toString()}\n        </li>\n        <li>\n          Expiry:{' '}\n          {new Date(\n            vendor.account.expiryTs.toNumber() * 1000,\n          ).toLocaleDateString()}\n          {` (${vendor.account.expiryTs.toNumber()})`}\n        </li>\n        <li>Expiry receiver: {vendor.account.expiryReceiver.toString()}</li>\n        <li>Expired: {vendor.account.expired.toString()}</li>\n        <li>\n          Reward queue cursor: {vendor.account.rewardEventQCursor.toString()}\n        </li>\n      </ul>\n      {(vendor.account.expiryTs.toNumber() <= Date.now()/1000) && registryClient.provider.wallet.publicKey.equals(vendor.account.expiryReceiver) && (\n        <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\n          <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={expire}\n            style={{ marginRight: '24px' }}\n          >\n            Expire\n          </Button>\n          <div style={{ flex: 1, marginRight: '24px' }}>\n            <OwnedTokenAccountsSelect\n              variant=\"outlined\"\n              decimals={vendorMint.decimals}\n              mint={vendor.account.mint}\n              onChange={(f: PublicKey) => {\n                setExpiryReceiverToken(f);\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport class RewardListItemViewModel {\n  constructor(\n    readonly reward: any,\n    readonly cursor: number,\n    readonly needsClaim: boolean,\n    readonly mint: ProgramAccount,\n    readonly vendor: ProgramAccount,\n  ) {}\n\n  static fromMessage(ctx: Context, event: any): RewardListItemViewModel | null {\n    let needsClaim = false;\n\n    const vendor = ctx.accounts[event.vendor.toString()];\n\n    if (vendor === undefined) {\n      return null;\n    }\n\n    const mint = {\n      publicKey: vendor.mint,\n      account: ctx.accounts[vendor.mint.toString()],\n    };\n\n    if (ctx.member !== undefined) {\n      // Must own shares of the reward's target pool.\n      const sptAccount =\n        ctx.accounts[ctx.member.account.balances.spt.toString()];\n      const lockedSptAccount =\n        ctx.accounts[ctx.member.account.balancesLocked.spt.toString()];\n\n      const ownsPoolShares = sptAccount.amount + lockedSptAccount.amount > 0;\n\n      // Must not have claimed the reward yet.\n      const notYetClaimed =\n        vendor.rewardEventQCursor >= ctx.member.account.rewardsCursor;\n\n      // Must have staked before the reward was dropped.\n      const isEligible = ctx.member.account.lastStakeTs < vendor.startTs;\n\n      // Must not have let the reward expire.\n      const expired = vendor.expired;\n\n      needsClaim = ownsPoolShares && notYetClaimed && isEligible && !expired;\n    }\n\n    const vendorProgramAccount = {\n      publicKey: event.vendor,\n      account: vendor,\n    };\n\n    return new RewardListItemViewModel(\n      event,\n      vendor.rewardEventQCursor,\n      needsClaim,\n      mint,\n      vendorProgramAccount,\n    );\n  }\n}\n\ntype Context = {\n  accounts: any;\n  rewardEventQueue: ProgramAccount;\n  member?: ProgramAccount;\n  network: Network;\n};\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { encode as encodeBase64 } from 'js-base64';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport GavelIcon from '@material-ui/icons/Gavel';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport Paper from '@material-ui/core/Paper';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport Collapse from '@material-ui/core/Collapse';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport BuildIcon from '@material-ui/icons/Build';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport AddIcon from '@material-ui/icons/Add';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport BN from 'bn.js';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\nimport * as idl from '../../utils/idl';\n\nexport default function Multisig({ multisig }: { multisig?: PublicKey }) {\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState('');\n  const disabled = !isValidPubkey(multisigAddress);\n  const searchFn = () => {\n    history.push(`/multisig/${multisigAddress}`);\n  };\n  return (\n    <div>\n      <div\n        style={{\n          paddingLeft: '16px',\n          paddingRight: '16px',\n          borderBottom: 'solid 1pt #ccc',\n          display: 'flex',\n        }}\n      >\n        <input\n          style={{\n            flex: 1,\n            background: 'none',\n            padding: '16px',\n            border: 'none',\n            outlineWidth: 0,\n          }}\n          placeholder=\"Multisig address\"\n          value={multisigAddress}\n          onChange={e => setMultisigAddress(e.target.value as string)}\n          onKeyPress={e => {\n            if (e.key === 'Enter') {\n              searchFn();\n            }\n          }}\n        />\n        <IconButton disabled={disabled} onClick={searchFn}>\n          <SearchIcon />\n        </IconButton>\n        <NewMultisigButton />\n      </div>\n      <div>{multisig && <MultisigInstance multisig={multisig} />}</div>\n    </div>\n  );\n}\n\nfunction isValidPubkey(addr: string): boolean {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function MultisigInstance({ multisig }: { multisig: PublicKey }) {\n  const { multisigClient } = useWallet();\n  const [multisigAccount, setMultisigAccount] = useState<any>(undefined);\n  const [transactions, setTransactions] = useState<any>(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(\n    false,\n  );\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient.account\n      .multisig(multisig)\n      .then((account: any) => {\n        setMultisigAccount(account);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        setMultisigAccount(null);\n      });\n  }, [multisig, multisigClient.account]);\n  useEffect(() => {\n    multisigClient.account.transaction.all(multisig.toBuffer()).then(txs => {\n      setTransactions(txs);\n    });\n  }, [multisigClient.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient.account.multisig\n      .subscribe(multisig)\n      .on('change', account => {\n        setMultisigAccount(account);\n      });\n  }, [multisigClient, multisig]);\n  return (\n    <Container fixed maxWidth=\"md\" style={{ marginBottom: '16px' }}>\n      <div>\n        <Card style={{ marginTop: '24px' }}>\n          {multisigAccount === undefined ? (\n            <div style={{ padding: '16px' }}>\n              <CircularProgress\n                style={{\n                  display: 'block',\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                }}\n              />\n            </div>\n          ) : multisigAccount === null ? (\n            <CardContent>\n              <Typography\n                color=\"textSecondary\"\n                style={{\n                  padding: '24px',\n                  textAlign: 'center',\n                }}\n              >\n                Multisig not found\n              </Typography>\n            </CardContent>\n          ) : (\n            <></>\n          )}\n        </Card>\n        {multisigAccount && (\n          <Paper>\n            <AppBar\n              style={{ marginTop: '24px' }}\n              position=\"static\"\n              color=\"default\"\n              elevation={1}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n                  {multisig.toString()} | {multisigAccount.threshold.toString()}{' '}\n                  of {multisigAccount.owners.length.toString()} Multisig\n                </Typography>\n                <Tooltip title=\"Signer\" arrow>\n                  <IconButton onClick={() => setShowSignerDialog(true)}>\n                    <InfoIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add\" arrow>\n                  <IconButton onClick={() => setShowAddTransactionDialog(true)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n            </AppBar>\n            <List disablePadding>\n              {transactions === null ? (\n                <div style={{ padding: '16px' }}>\n                  <CircularProgress\n                    style={{\n                      display: 'block',\n                      marginLeft: 'auto',\n                      marginRight: 'auto',\n                    }}\n                  />\n                </div>\n              ) : transactions.length === 0 ? (\n                <ListItem>\n                  <ListItemText primary=\"No transactions found\" />\n                </ListItem>\n              ) : (\n                transactions.map((tx: any) => (\n                  <TxListItem\n                    key={tx.publicKey.toString()}\n                    multisig={multisig}\n                    multisigAccount={multisigAccount}\n                    tx={tx}\n                  />\n                ))\n              )}\n            </List>\n          </Paper>\n        )}\n      </div>\n      <AddTransactionDialog\n        multisig={multisig}\n        open={showAddTransactionDialog}\n        onClose={() => setShowAddTransactionDialog(false)}\n        didAddTransaction={() => setForceRefresh(!forceRefresh)}\n      />\n      {multisigAccount && (\n        <SignerDialog\n          multisig={multisig}\n          multisigAccount={multisigAccount}\n          open={showSignerDialog}\n          onClose={() => setShowSignerDialog(false)}\n        />\n      )}\n    </Container>\n  );\n}\n\nfunction NewMultisigButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div>\n      <IconButton onClick={() => setOpen(true)}>\n        <AddIcon />\n      </IconButton>\n      <NewMultisigDialog open={open} onClose={() => setOpen(false)} />\n    </div>\n  );\n}\n\nfunction NewMultisigDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const history = useHistory();\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const [threshold, setThreshold] = useState(2);\n  // @ts-ignore\n  const zeroAddr = new PublicKey().toString();\n  const [participants, setParticipants] = useState([\n    multisigClient.provider.wallet.publicKey.toString(),\n    zeroAddr,\n  ]);\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n  const createMultisig = async () => {\n    enqueueSnackbar('Creating multisig', {\n      variant: 'info',\n    });\n    const multisig = new Account();\n    // Disc. + threshold + nonce.\n    const baseSize = 8 + 8 + 1;\n    // Can only grow the participant set by 2x the initialized value.\n    const ownerSize = participants.length * 2 * 32 + 8;\n    const multisigSize = baseSize + ownerSize;\n    const [, nonce] = await PublicKey.findProgramAddress(\n      [multisig.publicKey.toBuffer()],\n      multisigClient.programId,\n    );\n    const owners = participants.map(p => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(\n      owners,\n      new BN(threshold),\n      nonce,\n      {\n        accounts: {\n          multisig: multisig.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [multisig],\n        instructions: [\n          await multisigClient.account.multisig.createInstruction(\n            multisig,\n            // @ts-ignore\n            multisigSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    _onClose();\n    history.push(`/multisig/${multisig.publicKey.toString()}`);\n  };\n  return (\n    <Dialog fullWidth open={open} onClose={_onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Multisig\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={e => setThreshold(parseInt(e.target.value) as number)}\n        />\n        {participants.map((p, idx) => (\n          <TextField\n            key={p}\n            fullWidth\n            label=\"Participant\"\n            value={p}\n            onChange={e => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey().toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={_onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={() =>\n            createMultisig().catch(err => {\n              const str = err ? err.toString() : '';\n              enqueueSnackbar(`Error creating multisig: ${str}`, {\n                variant: 'error',\n              });\n            })\n          }\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TxListItem({\n  multisig,\n  multisigAccount,\n  tx,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  tx: any;\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const { multisigClient } = useWallet();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient.account.transaction\n      .subscribe(tx.publicKey)\n      .on('change', account => {\n        setTxAccount(account);\n      });\n  }, [multisigClient, multisig, tx.publicKey]);\n  const rows = [\n    {\n      field: 'Program ID',\n      value: txAccount.programId.toString(),\n    },\n    {\n      field: 'Did execute',\n      value: txAccount.didExecute.toString(),\n    },\n    {\n      field: 'Instruction data',\n      value: (\n        <code\n          style={{\n            wordBreak: 'break-word',\n            width: '370px',\n            background: 'black',\n            color: '#ffffff',\n            float: 'right',\n            textAlign: 'left',\n          }}\n        >\n          {encodeBase64(txAccount.data)}\n        </code>\n      ),\n    },\n    {\n      field: 'Multisig',\n      value: txAccount.multisig.toString(),\n    },\n    {\n      field: 'Transaction account',\n      value: tx.publicKey.toString(),\n    },\n    {\n      field: 'Owner set seqno',\n      value: txAccount.ownerSetSeqno.toString(),\n    },\n  ];\n  const msAccountRows = multisigAccount.owners.map(\n    (owner: PublicKey, idx: number) => {\n      return {\n        field: owner.toString(),\n        value: txAccount.signers[idx] ? <CheckIcon /> : <RemoveIcon />,\n      };\n    },\n  );\n  const approve = async () => {\n    enqueueSnackbar('Approving transaction', {\n      variant: 'info',\n    });\n    await multisigClient.rpc.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey,\n      },\n    });\n    enqueueSnackbar('Transaction approved', {\n      variant: 'success',\n    });\n  };\n  const execute = async () => {\n    enqueueSnackbar('Executing transaction', {\n      variant: 'info',\n    });\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    await multisigClient.rpc.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey,\n      },\n      remainingAccounts: txAccount.accounts\n        .map((t: any) => {\n          if (t.pubkey.equals(multisigSigner)) {\n            return { ...t, isSigner: false };\n          }\n          return t;\n        })\n        .concat({\n          pubkey: txAccount.programId,\n          isWritable: false,\n          isSigner: false,\n        }),\n    });\n    enqueueSnackbar('Transaction executed', {\n      variant: 'success',\n    });\n  };\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)}>\n        <ListItemIcon>{icon(tx, multisigClient)}</ListItemIcon>\n        {ixLabel(tx, multisigClient)}\n        {txAccount.didExecute && (\n          <CheckCircleIcon style={{ marginRight: '16px' }} />\n        )}\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <div style={{ background: '#ececec', padding: '10px' }}>\n          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n            <Button\n              style={{ marginRight: '10px' }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() =>\n                approve().catch(err => {\n                  let errStr = '';\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                    variant: 'error',\n                  });\n                })\n              }\n            >\n              Approve\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() =>\n                execute().catch(err => {\n                  let errStr = '';\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                    variant: 'error',\n                  });\n                })\n              }\n            >\n              Execute\n            </Button>\n          </div>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Transaction Field</TableCell>\n                    <TableCell align=\"right\">Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map(r => (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">{r.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Multisig Owner</TableCell>\n                    <TableCell align=\"right\">Did Sign</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno &&\n                    msAccountRows.map((r: any) => (\n                      <TableRow>\n                        <TableCell>{r.field}</TableCell>\n                        <TableCell align=\"right\">{r.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n              {txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && (\n                <div style={{ marginTop: '16px' }}>\n                  <Typography\n                    color=\"textSecondary\"\n                    style={{ textAlign: 'center' }}\n                  >\n                    The owner set has changed since this transaction was created\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <AccountsList accounts={txAccount.accounts} />\n            </CardContent>\n          </Card>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nfunction ixLabel(tx: any, multisigClient: any) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return (\n        <ListItemText\n          primary=\"Program upgrade\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      'global',\n      'change_threshold',\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set threshold\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      'global',\n      'set_owners',\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set owners\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return (\n      <ListItemText primary=\"Upgrade IDL\" secondary={tx.publicKey.toString()} />\n    );\n  }\n  return <ListItemText primary={tx.publicKey.toString()} />;\n}\n\nfunction AccountsList({ accounts }: { accounts: any }) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Account</TableCell>\n          <TableCell align=\"right\">Writable</TableCell>\n          <TableCell align=\"right\">Signer</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {accounts.map((r: any) => (\n          <TableRow>\n            <TableCell>{r.pubkey.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isWritable.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isSigner.toString()}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SignerDialog({\n  multisig,\n  multisigAccount,\n  open,\n  onClose,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { multisigClient } = useWallet();\n  const [signer, setSigner] = useState<null | string>(null);\n  useEffect(() => {\n    PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    ).then(addrNonce => setSigner(addrNonce[0].toString()));\n  }, [multisig, multisigClient.programId, setSigner]);\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          Multisig Info\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: '16px' }}>\n        <DialogContentText>\n          <b>Program derived address</b>: {signer}. This is the address one\n          should use as the authority for data governed by the multisig.\n        </DialogContentText>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Owners</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {multisigAccount.owners.map((r: any) => (\n              <TableRow>\n                <TableCell>{r.toString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction AddTransactionDialog({\n  multisig,\n  open,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  open: boolean;\n  onClose: () => void;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Transaction\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: '16px' }}>\n        <DialogContentText>\n          Create a new transaction to be signed by the multisig. This\n          transaction will not execute until enough owners have signed the\n          transaction.\n        </DialogContentText>\n        <List disablePadding>\n          <ProgramUpdateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <IdlUpgradeListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <MultisigSetOwnersListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ChangeThresholdListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </List>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ChangeThresholdListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Change threshold'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <ChangeThresholdListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction ChangeThresholdListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [threshold, setThreshold] = useState(2);\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const { enqueueSnackbar } = useSnackbar();\n  const changeThreshold = async () => {\n    enqueueSnackbar('Creating change threshold transaction', {\n      variant: 'info',\n    });\n    const data = changeThresholdData(multisigClient, threshold);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 1000; // todo\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Threshold\"\n        value={threshold}\n        type=\"number\"\n        onChange={e => {\n          // @ts-ignore\n          setThreshold(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <Button onClick={() => changeThreshold()}>Change Threshold</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction MultisigSetOwnersListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <SupervisorAccountIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Set owners'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <SetOwnersListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction SetOwnersListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const zeroAddr = new PublicKey().toString();\n  const [participants, setParticipants] = useState([\n    multisigClient.provider.wallet.publicKey.toString(),\n    zeroAddr,\n  ]);\n  const { enqueueSnackbar } = useSnackbar();\n  const setOwners = async () => {\n    enqueueSnackbar('Creating setOwners transaction', {\n      variant: 'info',\n    });\n    const owners = participants.map(p => new PublicKey(p));\n    const data = setOwnersData(multisigClient, owners);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 5000; // TODO: tighter bound.\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      {participants.map((p, idx) => (\n        <TextField\n          fullWidth\n          style={{ marginTop: '16px' }}\n          label=\"Participant\"\n          value={p}\n          onChange={e => {\n            const p = [...participants];\n            p[idx] = e.target.value;\n            setParticipants(p);\n          }}\n        />\n      ))}\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <IconButton\n          onClick={() => {\n            const p = [...participants];\n            // @ts-ignore\n            p.push(new PublicKey().toString());\n            setParticipants(p);\n          }}\n        >\n          <AddIcon />\n        </IconButton>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => setOwners()}>Set Owners</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction IdlUpgradeListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <DescriptionIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Upgrade IDL'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeIdlListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction UpgradeIdlListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info',\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    const idlAddr = await anchor.utils.idlAddress(programAddr);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const data = idl.encodeInstruction({ setBuffer: {} });\n    const accs = [\n      {\n        pubkey: bufferAddr,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: idlAddr, isWritable: true, isSigner: false },\n      { pubkey: multisigSigner, isWritable: true, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      programAddr,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={e => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: '16px' }}\n        fullWidth\n        label=\"New IDL buffer\"\n        value={buffer}\n        onChange={e => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ProgramUpdateListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Upgrade program'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeProgramListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n  'BPFLoaderUpgradeab1e11111111111111111111111',\n);\n\nfunction UpgradeProgramListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info',\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    // Hard code serialization.\n    const data = Buffer.from([3, 0, 0, 0]);\n\n    const programAccount = await (async () => {\n      const programAccount = await multisigClient.provider.connection.getAccountInfo(\n        programAddr,\n      );\n      if (programAccount === null) {\n        throw new Error('Invalid program ID');\n      }\n      return {\n        // Hard code deserialization.\n        programdataAddress: new PublicKey(programAccount.data.slice(4)),\n      };\n    })();\n    const spill = multisigClient.provider.wallet.publicKey;\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accs = [\n      {\n        pubkey: programAccount.programdataAddress,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: programAddr, isWritable: true, isSigner: false },\n      { pubkey: bufferAddr, isWritable: true, isSigner: false },\n      { pubkey: spill, isWritable: true, isSigner: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: multisigSigner, isWritable: false, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      BPF_LOADER_UPGRADEABLE_PID,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={e => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: '16px' }}\n        fullWidth\n        label=\"New program buffer\"\n        value={buffer}\n        onChange={e => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return <BuildIcon />;\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      'global',\n      'change_threshold',\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return <GavelIcon />;\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      'global',\n      'set_owners',\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return <SupervisorAccountIcon />;\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return <DescriptionIcon />;\n  }\n  return <ReceiptIcon />;\n}\n\n// @ts-ignore\nfunction changeThresholdData(multisigClient, threshold) {\n  return multisigClient.coder.instruction.encode('change_threshold', {\n    threshold: new BN(threshold),\n  });\n}\n\n// @ts-ignore\nfunction setOwnersData(multisigClient, owners) {\n  return multisigClient.coder.instruction.encode('set_owners', {\n    owners,\n  });\n}\n","import React, {\n  ReactNode,\n  PropsWithChildren,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport BN from 'bn.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\nimport { networks } from '../store/config';\n\nconst TokenListContext = React.createContext<TokenListContextValues>({\n  tokenMap: new Map(),\n});\n\ntype TokenListContextValues = {\n  tokenMap: Map<string, TokenInfo>;\n};\n\nexport function useTokenInfos(): Map<string, TokenInfo> {\n  const { tokenMap } = useContext<TokenListContextValues>(TokenListContext);\n  return tokenMap;\n}\n\nexport function TokenRegistryProvider(props: PropsWithChildren<ReactNode>) {\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    new TokenListProvider().resolve().then(tokens => {\n      const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n      setTokenMap(\n        tokenList.reduce((map, item) => {\n          map.set(item.address, item);\n          return map;\n        }, new Map()),\n      );\n    });\n  }, [setTokenMap]);\n\n  return (\n    <TokenListContext.Provider value={{ tokenMap }}>\n      {props.children}\n    </TokenListContext.Provider>\n  );\n}\n\nexport function fromDisplay(amount: number, decimals: number): BN {\n  return new BN(amount * 10 ** decimals);\n}\n\nexport function toDisplay(amount: BN | number, decimals: number): string {\n  if (amount instanceof BN) {\n    amount = amount.toNumber();\n  }\n  return (amount / 10 ** decimals).toString();\n}\n\nexport function toDisplayLabel(mint: PublicKey): string {\n  let whitelistedMint = Object.keys(networks.mainnet.mints)\n    .filter(label => networks.mainnet.mints[label].equals(mint))\n    .pop();\n  if (whitelistedMint) {\n    return whitelistedMint.toUpperCase();\n  }\n  return mint.toString();\n}\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'lockup',\n  instructions: [\n    {\n      name: 'createVesting',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'beneficiary',\n          type: 'publicKey',\n        },\n        {\n          name: 'depositAmount',\n          type: 'u64',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n        {\n          name: 'startTs',\n          type: 'i64',\n        },\n        {\n          name: 'endTs',\n          type: 'i64',\n        },\n        {\n          name: 'periodCount',\n          type: 'u64',\n        },\n        {\n          name: 'realizor',\n          type: {\n            option: {\n              defined: 'Realizor',\n            },\n          },\n        },\n      ],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vestingSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'token',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'whitelistWithdraw',\n      accounts: [\n        {\n          name: 'transfer',\n          accounts: [\n            {\n              name: 'lockup',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'whitelistedProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vesting',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vestingSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVaultAuthority',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n      ],\n      args: [\n        {\n          name: 'instructionData',\n          type: 'bytes',\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'whitelistDeposit',\n      accounts: [\n        {\n          name: 'transfer',\n          accounts: [\n            {\n              name: 'lockup',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'whitelistedProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vesting',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vestingSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVaultAuthority',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n      ],\n      args: [\n        {\n          name: 'instructionData',\n          type: 'bytes',\n        },\n      ],\n    },\n    {\n      name: 'availableForWithdrawal',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  state: {\n    struct: {\n      name: 'Lockup',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'whitelist',\n            type: {\n              vec: {\n                defined: 'WhitelistEntry',\n              },\n            },\n          },\n        ],\n      },\n    },\n    methods: [\n      {\n        name: 'new',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [],\n      },\n      {\n        name: 'whitelistAdd',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'entry',\n            type: {\n              defined: 'WhitelistEntry',\n            },\n          },\n        ],\n      },\n      {\n        name: 'whitelistDelete',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'entry',\n            type: {\n              defined: 'WhitelistEntry',\n            },\n          },\n        ],\n      },\n      {\n        name: 'setAuthority',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'newAuthority',\n            type: 'publicKey',\n          },\n        ],\n      },\n    ],\n  },\n  accounts: [\n    {\n      name: 'Vesting',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'beneficiary',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'grantor',\n            type: 'publicKey',\n          },\n          {\n            name: 'outstanding',\n            type: 'u64',\n          },\n          {\n            name: 'startBalance',\n            type: 'u64',\n          },\n          {\n            name: 'createdTs',\n            type: 'i64',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'endTs',\n            type: 'i64',\n          },\n          {\n            name: 'periodCount',\n            type: 'u64',\n          },\n          {\n            name: 'whitelistOwned',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'realizor',\n            type: {\n              option: {\n                defined: 'Realizor',\n              },\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Realizor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'program',\n            type: 'publicKey',\n          },\n          {\n            name: 'metadata',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'WhitelistEntry',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'programId',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'InvalidTimestamp',\n      msg: 'Vesting end must be greater than the current unix timestamp.',\n    },\n    {\n      code: 101,\n      name: 'InvalidPeriod',\n      msg: 'The number of vesting periods must be greater than zero.',\n    },\n    {\n      code: 102,\n      name: 'InvalidDepositAmount',\n      msg: 'The vesting deposit amount must be greater than zero.',\n    },\n    {\n      code: 103,\n      name: 'InvalidWhitelistEntry',\n      msg: 'The Whitelist entry is not a valid program address.',\n    },\n    {\n      code: 104,\n      name: 'InvalidProgramAddress',\n      msg: 'Invalid program address. Did you provide the correct nonce?',\n    },\n    {\n      code: 105,\n      name: 'InvalidVaultOwner',\n      msg: 'Invalid vault owner.',\n    },\n    {\n      code: 106,\n      name: 'InvalidVaultAmount',\n      msg: 'Vault amount must be zero.',\n    },\n    {\n      code: 107,\n      name: 'InsufficientWithdrawalBalance',\n      msg: 'Insufficient withdrawal balance.',\n    },\n    {\n      code: 108,\n      name: 'WhitelistFull',\n      msg: 'Whitelist is full',\n    },\n    {\n      code: 109,\n      name: 'WhitelistEntryAlreadyExists',\n      msg: 'Whitelist entry already exists',\n    },\n    {\n      code: 110,\n      name: 'InsufficientWhitelistDepositAmount',\n      msg: 'Balance must go up when performing a whitelist deposit',\n    },\n    {\n      code: 111,\n      name: 'WhitelistDepositOverflow',\n      msg: 'Cannot deposit more than withdrawn',\n    },\n    {\n      code: 112,\n      name: 'WhitelistWithdrawLimit',\n      msg: 'Tried to withdraw over the specified limit',\n    },\n    {\n      code: 113,\n      name: 'WhitelistEntryNotFound',\n      msg: 'Whitelist entry not found.',\n    },\n    {\n      code: 114,\n      name: 'Unauthorized',\n      msg: 'You do not have sufficient permissions to perform this action.',\n    },\n    {\n      code: 115,\n      name: 'UnableToWithdrawWhileStaked',\n      msg: 'You are unable to realize projected rewards until unstaking.',\n    },\n    {\n      code: 116,\n      name: 'InvalidLockRealizor',\n      msg: \"The given lock realizor doesn't match the vesting account.\",\n    },\n    {\n      code: 117,\n      name: 'UnrealizedVesting',\n      msg: 'You have not realized this vesting account.',\n    },\n    {\n      code: 118,\n      name: 'InvalidSchedule',\n      msg: 'Invalid vesting schedule given.',\n    },\n  ],\n};\n\nexport default idl;\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'registry',\n  instructions: [\n    {\n      name: 'initialize',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'mint',\n          type: 'publicKey',\n        },\n        {\n          name: 'authority',\n          type: 'publicKey',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n        {\n          name: 'withdrawalTimelock',\n          type: 'i64',\n        },\n        {\n          name: 'stakeRate',\n          type: 'u64',\n        },\n        {\n          name: 'rewardQLen',\n          type: 'u32',\n        },\n      ],\n    },\n    {\n      name: 'updateRegistrar',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'newAuthority',\n          type: {\n            option: 'publicKey',\n          },\n        },\n        {\n          name: 'withdrawalTimelock',\n          type: {\n            option: 'i64',\n          },\n        },\n      ],\n    },\n    {\n      name: 'createMember',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'updateMember',\n      accounts: [\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'metadata',\n          type: {\n            option: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'deposit',\n      accounts: [\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'depositLocked',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vestingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'memberVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'stake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrarSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n        {\n          name: 'locked',\n          type: 'bool',\n        },\n      ],\n    },\n    {\n      name: 'startUnstake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pendingWithdrawal',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n        {\n          name: 'locked',\n          type: 'bool',\n        },\n      ],\n    },\n    {\n      name: 'endUnstake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'pendingWithdrawal',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vaultPw',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'withdrawLocked',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vestingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vestingSigner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'memberVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'dropReward',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vendor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vendorVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'kind',\n          type: {\n            defined: 'RewardVendorKind',\n          },\n        },\n        {\n          name: 'total',\n          type: 'u64',\n        },\n        {\n          name: 'expiryTs',\n          type: 'i64',\n        },\n        {\n          name: 'expiryReceiver',\n          type: 'publicKey',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'claimReward',\n      accounts: [\n        {\n          name: 'cmn',\n          accounts: [\n            {\n              name: 'registrar',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'member',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'balances',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'balancesLocked',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'vendor',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vendorSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'clock',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'to',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'claimRewardLocked',\n      accounts: [\n        {\n          name: 'cmn',\n          accounts: [\n            {\n              name: 'registrar',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'member',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'balances',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'balancesLocked',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'vendor',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vendorSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'clock',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'lockupProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'expireReward',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vendor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vendorSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'expiryReceiver',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'expiryReceiverToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  state: {\n    struct: {\n      name: 'Registry',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'lockupProgram',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    methods: [\n      {\n        name: 'new',\n        accounts: [\n          {\n            name: 'lockupProgram',\n            isMut: false,\n            isSigner: false,\n          },\n        ],\n        args: [],\n      },\n      {\n        name: 'setLockupProgram',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'lockupProgram',\n            type: 'publicKey',\n          },\n        ],\n      },\n    ],\n  },\n  accounts: [\n    {\n      name: 'Registrar',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'withdrawalTimelock',\n            type: 'i64',\n          },\n          {\n            name: 'rewardEventQ',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'poolMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'stakeRate',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Member',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'beneficiary',\n            type: 'publicKey',\n          },\n          {\n            name: 'metadata',\n            type: 'publicKey',\n          },\n          {\n            name: 'balances',\n            type: {\n              defined: 'BalanceSandbox',\n            },\n          },\n          {\n            name: 'balancesLocked',\n            type: {\n              defined: 'BalanceSandbox',\n            },\n          },\n          {\n            name: 'rewardsCursor',\n            type: 'u32',\n          },\n          {\n            name: 'lastStakeTs',\n            type: 'i64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n        ],\n      },\n    },\n    {\n      name: 'PendingWithdrawal',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'member',\n            type: 'publicKey',\n          },\n          {\n            name: 'burned',\n            type: 'bool',\n          },\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'endTs',\n            type: 'i64',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'locked',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardQueue',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'head',\n            type: 'u32',\n          },\n          {\n            name: 'tail',\n            type: 'u32',\n          },\n          {\n            name: 'events',\n            type: {\n              vec: {\n                defined: 'RewardEvent',\n              },\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardVendor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'poolTokenSupply',\n            type: 'u64',\n          },\n          {\n            name: 'rewardEventQCursor',\n            type: 'u32',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'expiryTs',\n            type: 'i64',\n          },\n          {\n            name: 'expiryReceiver',\n            type: 'publicKey',\n          },\n          {\n            name: 'from',\n            type: 'publicKey',\n          },\n          {\n            name: 'total',\n            type: 'u64',\n          },\n          {\n            name: 'expired',\n            type: 'bool',\n          },\n          {\n            name: 'kind',\n            type: {\n              defined: 'RewardVendorKind',\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'BalanceSandbox',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'spt',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'vaultStake',\n            type: 'publicKey',\n          },\n          {\n            name: 'vaultPw',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardEvent',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'vendor',\n            type: 'publicKey',\n          },\n          {\n            name: 'ts',\n            type: 'i64',\n          },\n          {\n            name: 'locked',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardVendorKind',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Unlocked',\n          },\n          {\n            name: 'Locked',\n            fields: [\n              {\n                name: 'start_ts',\n                type: 'i64',\n              },\n              {\n                name: 'end_ts',\n                type: 'i64',\n              },\n              {\n                name: 'period_count',\n                type: 'u64',\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'RewardQAlreadyInitialized',\n      msg: 'The given reward queue has already been initialized.',\n    },\n    {\n      code: 101,\n      name: 'InvalidNonce',\n      msg: \"The nonce given doesn't derive a valid program address.\",\n    },\n    {\n      code: 102,\n      name: 'InvalidPoolMintAuthority',\n      msg: 'Invalid pool mint authority',\n    },\n    {\n      code: 103,\n      name: 'InvalidMemberSigner',\n      msg: \"Member signer doesn't match the derived address.\",\n    },\n    {\n      code: 104,\n      name: 'InvalidVaultDeposit',\n      msg: 'The given vault owner must match the signing depositor.',\n    },\n    {\n      code: 105,\n      name: 'InvalidDepositor',\n      msg: \"The signing depositor doesn't match either of the balance accounts\",\n    },\n    {\n      code: 106,\n      name: 'InvalidVault',\n      msg: 'The vault given does not match the vault expected.',\n    },\n    {\n      code: 107,\n      name: 'InvalidVaultOwner',\n      msg: 'Invalid vault owner.',\n    },\n    {\n      code: 108,\n      name: 'Unknown',\n      msg: 'An unknown error has occured.',\n    },\n    {\n      code: 109,\n      name: 'UnstakeTimelock',\n      msg: 'The unstake timelock has not yet expired.',\n    },\n    {\n      code: 110,\n      name: 'InsufficientReward',\n      msg: 'Reward vendors must have at least one token unit per pool token',\n    },\n    {\n      code: 111,\n      name: 'InvalidExpiry',\n      msg: 'Reward expiry must be after the current clock timestamp.',\n    },\n    {\n      code: 112,\n      name: 'VendorExpired',\n      msg: 'The reward vendor has been expired.',\n    },\n    {\n      code: 113,\n      name: 'CursorAlreadyProcessed',\n      msg: 'This reward has already been processed.',\n    },\n    {\n      code: 114,\n      name: 'NotStakedDuringDrop',\n      msg: 'The account was not staked at the time of this reward.',\n    },\n    {\n      code: 115,\n      name: 'VendorNotYetExpired',\n      msg: 'The vendor is not yet eligible for expiry.',\n    },\n    {\n      code: 116,\n      name: 'RewardsNeedsProcessing',\n      msg: 'Please collect your reward before otherwise using the program.',\n    },\n    {\n      code: 117,\n      name: 'ExpectedLockedVendor',\n      msg: 'Locked reward vendor expected but an unlocked vendor was given.',\n    },\n    {\n      code: 118,\n      name: 'ExpectedUnlockedVendor',\n      msg: 'Unlocked reward vendor expected but a locked vendor was given.',\n    },\n    {\n      code: 119,\n      name: 'InvalidVestingSigner',\n      msg: 'Locked deposit from an invalid deposit authority.',\n    },\n    {\n      code: 120,\n      name: 'UnrealizedReward',\n      msg: 'Locked rewards cannot be realized until one unstaked all tokens.',\n    },\n    {\n      code: 121,\n      name: 'InvalidBeneficiary',\n      msg: \"The beneficiary doesn't match.\",\n    },\n    {\n      code: 122,\n      name: 'InvalidRealizorMetadata',\n      msg: 'The given member account does not match the realizor metadata.',\n    },\n    {\n      code: 123,\n      name: 'InvalidVestingSchedule',\n      msg: 'Invalid vesting schedule for the locked reward.',\n    },\n    {\n      code: 124,\n      name: 'InvalidProgramAuthority',\n      msg: 'Please specify the correct authority for this program.',\n    },\n  ],\n};\n\nexport default idl;\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'multisig',\n  instructions: [\n    {\n      name: 'createMultisig',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'owners',\n          type: {\n            vec: 'publicKey',\n          },\n        },\n        {\n          name: 'threshold',\n          type: 'u64',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'createTransaction',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'proposer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'pid',\n          type: 'publicKey',\n        },\n        {\n          name: 'accs',\n          type: {\n            vec: {\n              defined: 'TransactionAccount',\n            },\n          },\n        },\n        {\n          name: 'data',\n          type: 'bytes',\n        },\n      ],\n    },\n    {\n      name: 'approve',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setOwners',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'owners',\n          type: {\n            vec: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'changeThreshold',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'threshold',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'executeTransaction',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'Multisig',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'owners',\n            type: {\n              vec: 'publicKey',\n            },\n          },\n          {\n            name: 'threshold',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'ownerSetSeqno',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Transaction',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'multisig',\n            type: 'publicKey',\n          },\n          {\n            name: 'programId',\n            type: 'publicKey',\n          },\n          {\n            name: 'accounts',\n            type: {\n              vec: {\n                defined: 'TransactionAccount',\n              },\n            },\n          },\n          {\n            name: 'data',\n            type: 'bytes',\n          },\n          {\n            name: 'signers',\n            type: {\n              vec: 'bool',\n            },\n          },\n          {\n            name: 'didExecute',\n            type: 'bool',\n          },\n          {\n            name: 'ownerSetSeqno',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'TransactionAccount',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'pubkey',\n            type: 'publicKey',\n          },\n          {\n            name: 'isSigner',\n            type: 'bool',\n          },\n          {\n            name: 'isWritable',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'InvalidOwner',\n      msg: 'The given owner is not part of this multisig.',\n    },\n    {\n      code: 101,\n      name: 'NotEnoughSigners',\n      msg: 'Not enough owners signed this transaction.',\n    },\n    {\n      code: 102,\n      name: 'TransactionAlreadySigned',\n      msg: 'Cannot delete a transaction that has been signed by an owner.',\n    },\n    {\n      code: 103,\n      name: 'Overflow',\n      msg: 'Overflow when adding.',\n    },\n    {\n      code: 104,\n      name: 'UnableToDelete',\n      msg: 'Cannot delete a transaction the owner did not create.',\n    },\n    {\n      code: 105,\n      name: 'AlreadyExecuted',\n      msg: 'The given transaction has already been executed.',\n    },\n    {\n      code: 106,\n      name: 'InvalidThreshold',\n      msg: 'Threshold must be less than or equal to the number of owners.',\n    },\n  ],\n};\n\nexport default idl;\n","import React, {\n  PropsWithChildren,\n  ReactElement,\n  ReactNode,\n  useMemo,\n  useContext,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  PublicKey,\n  Transaction,\n  Connection,\n  ConfirmOptions,\n} from \"@solana/web3.js\";\nimport { Provider } from \"@project-serum/common\";\nimport { Program } from \"@project-serum/anchor\";\nimport { WalletProvider as SolanaWalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { State as StoreState } from \"../../store/reducer\";\nimport LockupIdl from \"../../idl/lockup\";\nimport RegistryIdl from \"../../idl/registry\";\nimport MultisigIdl from \"../../idl/multisig\";\nimport { useWallet as useSolana } from \"@solana/wallet-adapter-react\";\nimport { WalletAdapter } from \"@solana/wallet-adapter-base\";\n\nexport function useWallet(): WalletContextValues {\n  const w = useContext(WalletContext);\n  if (!w) {\n    throw new Error(\"Missing wallet context\");\n  }\n  return w;\n}\n\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\n\ntype WalletContextValues = {\n  wallet: Wallet;\n  lockupClient: Program;\n  registryClient: Program;\n\tmultisigClient: Program;\n};\n\nexport default function WalletProvider(\n  props: PropsWithChildren<ReactNode>\n): ReactElement {\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    []\n  );\n\n  return (\n    <SolanaWalletProvider wallets={wallets}>\n      <WalletProviderInner {...props} />\n    </SolanaWalletProvider>\n  );\n}\n\nfunction WalletProviderInner(props: PropsWithChildren<ReactNode>) {\n  const { wallet: solWallet } = useSolana();\n  const { walletProvider, network } = useSelector((state: StoreState) => {\n    return {\n      walletProvider: state.common.walletProvider,\n      network: state.common.network,\n    };\n  });\n  const { wallet, lockupClient, registryClient, multisigClient } =\n    useMemo(() => {\n      const opts: ConfirmOptions = {\n        preflightCommitment: \"recent\",\n        commitment: \"recent\",\n      };\n      const connection = new Connection(network.url, opts.preflightCommitment);\n      const wallet = new Wallet(solWallet ? solWallet.adapter() : undefined);\n      // @ts-ignore\n      const provider = new Provider(connection, wallet, opts);\n\n      const lockupClient = new Program(\n        LockupIdl,\n        network.lockupProgramId,\n        provider\n      );\n      const registryClient = new Program(\n        RegistryIdl,\n        network.registryProgramId,\n        provider\n      );\n      const multisigClient = new Program(\n        MultisigIdl,\n        network.multisigProgramId,\n        provider,\n      );\n      return {\n        wallet,\n        lockupClient,\n        registryClient,\n        multisigClient,\n      };\n    }, [solWallet, walletProvider, network]);\n\n  return (\n    <WalletContext.Provider\n      value={{ wallet, lockupClient, registryClient, multisigClient }}\n    >\n      {props.children}\n    </WalletContext.Provider>\n  );\n}\n\nclass Wallet {\n  get publicKey(): PublicKey | undefined {\n    // @ts-ignore\n    return this.adapter ? this.adapter.publicKey : undefined;\n  }\n\n  constructor(readonly adapter: WalletAdapter | undefined) {}\n\n  on(event: any, cb: any) {\n    if (this.adapter) {\n      return this.adapter.on(event, cb);\n    }\n  }\n\n  async connect() {\n    if (this.adapter) {\n      try {\n        await this.adapter.connect();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.adapter) {\n      this.adapter.disconnect();\n    }\n  }\n\n  signTransaction(tx: Transaction) {\n    if (this.adapter) {\n      return this.adapter.signTransaction(tx);\n    }\n  }\n\n  signAllTransactions(txs: Transaction[]) {\n    if (this.adapter) {\n      return this.adapter.signAllTransactions(txs);\n    }\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport {\n  Account,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport { u64 } from '@solana/spl-token';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { useWallet } from '../components/common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../components/common/Notification';\nimport { State as StoreState, ProgramAccount } from '../store/reducer';\nimport { ActionType } from '../store/actions';\nimport * as skin from '../skin';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\nimport { memberSigner, registrarSigner } from '../utils/registry';\n\nexport default function Stake() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, memberAccount, registrarAccount, registrar } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        member: state.registry.member,\n        memberAccount: state.registry.member\n          ? state.accounts[state.registry.member.toString()]\n          : undefined,\n        registrarAccount: registrarAccount,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const createPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Staking ${toDisplayLabel(registrarAccount.poolMint)} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const tx = await registryClient.rpc.stake(new u64(amount), isLocked, {\n      accounts: {\n        registrar,\n        rewardEventQ: registrarAccount.rewardEventQ,\n        poolMint: registrarAccount.poolMint,\n        member,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        balances: memberAccount.balances,\n        balancesLocked: memberAccount.balancesLocked,\n        memberSigner: (\n          await memberSigner(registryClient.programId, registrar, member!)\n        ).publicKey,\n        registrarSigner: (\n          await registrarSigner(registryClient.programId, registrar)\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Staking complete`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const redeemPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Unstaking ${amount} ${toDisplayLabel(\n        registrarAccount.poolMint,\n      )} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const pendingWithdrawal = new Account();\n    const tx = await registryClient.rpc.startUnstake(\n      new u64(amount),\n      isLocked,\n      {\n        accounts: {\n          registrar,\n          rewardEventQ: registrarAccount.rewardEventQ,\n          poolMint: registrarAccount.poolMint,\n\n          pendingWithdrawal: pendingWithdrawal.publicKey,\n          member,\n          beneficiary: registryClient.provider.wallet.publicKey,\n          balances: memberAccount.balances,\n          balancesLocked: memberAccount.balancesLocked,\n\n          memberSigner: (\n            await memberSigner(registryClient.programId, registrar, member!)\n          ).publicKey,\n\n          tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n          clock: SYSVAR_CLOCK_PUBKEY,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [pendingWithdrawal],\n        instructions: [\n          await registryClient.account.pendingWithdrawal.createInstruction(\n            pendingWithdrawal,\n          ),\n        ],\n      },\n    );\n    const pwAccount = await registryClient.account.pendingWithdrawal(\n      pendingWithdrawal.publicKey,\n    );\n    dispatch({\n      type: ActionType.RegistryCreatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: {\n          publicKey: pendingWithdrawal.publicKey,\n          account: pwAccount,\n        },\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer initiated`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const createPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      createPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error staking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n  const redeemPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      redeemPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error unstaking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n          <PoolCard\n            title={'Stake Pool'}\n            create={createPool}\n            redeem={redeemPool}\n          />\n        </div>\n        <RedemptionList\n          style={{\n            marginBottom: '24px',\n          }}\n        />\n      </div>\n      <AllPendingTransfers />\n    </div>\n  );\n}\n\ntype PoolCardProps = {\n  title: string;\n  create: (shares: number, isLocked: boolean) => void;\n  redeem: (shares: number, isLocked: boolean) => void;\n};\n\nfunction PoolCard(props: PoolCardProps) {\n  const { title, create, redeem } = props;\n  const [poolAmount, setPoolAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const { poolTokenMint, member, registrarAccount, mint } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      const poolTokenMint = {\n        publicKey: registrarAccount.poolMint,\n        account: state.accounts[registrarAccount.poolMint.toString()],\n      };\n      return {\n        poolTokenMint,\n        member: state.registry.member,\n        registrarAccount,\n        mint: {\n          publicKey: registrarAccount.mint,\n          account: state.accounts[registrarAccount.mint.toString()],\n        },\n      };\n    },\n  );\n\n  const pricePerShare = toDisplay(\n    registrarAccount.stakeRate,\n    mint.account.decimals,\n  );\n\n  const cost = poolAmount\n    ? toDisplay(\n        registrarAccount.stakeRate.mul(new BN(poolAmount)),\n        mint.account.decimals,\n      )\n    : 0;\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <CardHeader\n          title={title}\n          subheader={poolTokenMint.publicKey.toString()}\n        />\n        <div\n          style={{\n            paddingRight: '16px',\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography color=\"textSecondary\"></Typography>\n        </div>\n      </div>\n      <CardContent>\n        <div\n          style={{\n            marginBottom: '16px',\n          }}\n        >\n          <Typography>\n            Please enter the amount of pool tokens you would like to purchase in\n            the form below. Upon pressing <b>stake</b> you will create new pool\n            tokens at a fixed price, adding to the amount of pool tokens\n            outstanding.\n          </Typography>\n          <br />\n          <Typography>\n            Unstaking works similarly, except one must incur an unbonding period\n            where funds will not be able to be retrieved until the unbonding\n            period ends. At the end of the unbonding period, click the blue\n            checkbox next to your pending transfer. If the checkbox is grey,\n            your unbonding period has not yet completed.\n          </Typography>\n          <br />\n          <Typography style={{ fontWeight: 'bold' }}>\n            Total pool tokens outstanding\n          </Typography>\n          <Typography>{poolTokenMint.account.supply.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Price per pool token\n          </Typography>\n          <Typography>{pricePerShare.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Your total cost\n          </Typography>\n          <Typography>\n            {cost} {toDisplayLabel(mint.publicKey)}\n          </Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Unbonding period (days)\n          </Typography>\n          <Typography>\n            {(\n              registrarAccount.withdrawalTimelock /\n              (60 * 60 * 24.0)\n            ).toString()}\n          </Typography>\n        </div>\n        <div>\n          <div style={{ marginBottom: '10px' }}>\n            <FormControl>\n              <TextField\n                style={{ width: '100%' }}\n                label=\"Pool tokens\"\n                type=\"number\"\n                variant=\"outlined\"\n                onChange={e => setPoolAmount(parseInt(e.target.value))}\n              />\n            </FormControl>\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Button\n                disabled={member === undefined}\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => create(poolAmount as number, isLocked)}\n              >\n                Stake\n              </Button>\n              <Button\n                disabled={member === undefined}\n                color=\"secondary\"\n                variant=\"contained\"\n                style={{ marginLeft: '10px' }}\n                onClick={() => redeem(poolAmount as number, isLocked)}\n              >\n                Unstake\n              </Button>\n            </div>\n            <div>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={isLocked}\n                    onChange={() => setIsLocked(!isLocked)}\n                  />\n                }\n                labelPlacement={'start'}\n                label=\"Locked balances\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ntype RedemptionListProps = {\n  style: any;\n};\n\nfunction RedemptionList(props: RedemptionListProps) {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, registrar, mint, pendingWithdrawals } = useSelector(\n    (state: StoreState) => {\n      const member = state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined;\n      const registrar = {\n        publicKey: state.registry.registrar!,\n        account: state.accounts[state.registry.registrar.toString()],\n      };\n      const mint = {\n        publicKey: registrar.account.mint,\n        account: state.accounts[registrar.account.mint.toString()],\n      };\n      const pendingWithdrawals =\n        state.registry.pendingWithdrawals === null\n          ? null\n          : state.registry.pendingWithdrawals.map(pw => {\n              return {\n                publicKey: pw,\n                account: state.accounts[pw.toString()],\n              };\n            });\n      return {\n        member,\n        registrar,\n        mint,\n        pendingWithdrawals,\n      };\n    },\n  );\n\n  useEffect(() => {\n    if (!member) {\n      return;\n    }\n    if (pendingWithdrawals !== null) {\n      return;\n    }\n\n    // Only grab pending withdrawals for the current member account.\n    const filter = Buffer.concat([\n      registrar.publicKey.toBuffer(),\n      member.publicKey.toBuffer(),\n    ]);\n    registryClient.account.pendingWithdrawal\n      .all(filter)\n      .then(pendingWithdrawals => {\n        dispatch({\n          type: ActionType.RegistrySetPendingWithdrawals,\n          item: {\n            pendingWithdrawals,\n          },\n        });\n      });\n  }, [\n    dispatch,\n    registrar,\n    member,\n    pendingWithdrawals,\n    registryClient.account.pendingWithdrawal,\n  ]);\n\n  return (\n    <div style={props.style}>\n      <Card\n        style={{\n          marginLeft: '20px',\n          marginTop: '24px',\n          width: '294px',\n        }}\n      >\n        <CardContent\n          style={{\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingBottom: 0,\n            paddingTop: 0,\n          }}\n        >\n          <div\n            style={{\n              marginLeft: '24px',\n              marginTop: '24px',\n              marginRight: '24px',\n              borderBottom: 'solid 1pt #ccc',\n              paddingBottom: '12px',\n            }}\n          >\n            <Typography style={{}}>Your Pending Transfers</Typography>\n            <Typography style={{ fontSize: '12px' }} color=\"textSecondary\">\n              Click the checkmark to complete a transfer on or after the \"end\"\n              date.\n            </Typography>\n          </div>\n          <div style={{ paddingLeft: '24px', paddingRight: '24px' }}>\n            {member && pendingWithdrawals === null ? (\n              <div style={{ paddingTop: '24px', marginBottom: '24px' }}>\n                <CircularProgress\n                  style={{\n                    display: 'block',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                  }}\n                />\n              </div>\n            ) : pendingWithdrawals !== null && pendingWithdrawals.length > 0 ? (\n              pendingWithdrawals.map((pw, idx) => {\n                return (\n                  <PendingStakeListItem\n                    key={pw.publicKey.toString()}\n                    isLast={idx === pendingWithdrawals.length - 1}\n                    registrar={registrar}\n                    pw={pw}\n                    member={member!}\n                    mint={mint}\n                  />\n                );\n              })\n            ) : (\n              <div\n                style={{\n                  paddingBottom: '24px',\n                  paddingTop: '12px',\n                }}\n              >\n                <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                  None found\n                </Typography>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ntype PendingStakeListItemProps = {\n  isLast?: boolean;\n  registrar: ProgramAccount;\n  pw: ProgramAccount;\n  member: ProgramAccount;\n  mint: ProgramAccount;\n};\n\nfunction PendingStakeListItem(props: PendingStakeListItemProps) {\n  const { isLast, pw, member, registrar, mint } = props;\n  const sptLabel = (() => {\n    const isLocked = pw.account.locked;\n    const l = isLocked ? '(locked)' : '';\n    return `${toDisplay(\n      pw.account.amount,\n      mint.account.decimals,\n    )} ${toDisplayLabel(mint.publicKey)} ${l}`;\n  })();\n  return (\n    <div\n      style={{\n        paddingBottom: !isLast ? '12px' : '24px',\n        paddingTop: '12px',\n        borderBottom: 'solid 1pt #ccc',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          overflow: 'hidden',\n        }}\n      >\n        <div>\n          <Typography\n            style={{\n              whiteSpace: 'pre',\n              maxWidth: '195px',\n              overflow: 'hidden',\n              fontWeight: 'bold',\n              fontSize: '14px',\n            }}\n          >\n            {`${sptLabel}`}\n          </Typography>\n        </div>\n        <div>\n          <PendingWithdrawalButton\n            registrar={registrar}\n            member={member}\n            pendingWithdrawal={pw}\n          />\n        </div>\n      </div>\n      <Typography style={{ fontSize: '14px' }}>\n        {`Start: ${new Date(\n          pw.account.startTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography style={{ fontSize: '14px' }}>\n        {`End:   ${new Date(\n          pw.account.endTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography\n        color=\"textSecondary\"\n        style={{\n          fontSize: '14px',\n          overflow: 'hidden',\n        }}\n      >\n        {pw.account.pool.toString()}\n      </Typography>\n    </div>\n  );\n}\n\ntype PendingWithdrawalButtonProps = {\n  registrar: ProgramAccount;\n  pendingWithdrawal: ProgramAccount;\n  member: ProgramAccount;\n};\n\nfunction PendingWithdrawalButton(props: PendingWithdrawalButtonProps) {\n  const { pendingWithdrawal, member, registrar } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const endPendingWithdrawal = async () => {\n    enqueueSnackbar(`Completing redemption`, {\n      variant: 'info',\n    });\n    const balances = pendingWithdrawal.account.locked\n      ? member.account.balancesLocked\n      : member.account.balances;\n    const tx = await registryClient.rpc.endUnstake({\n      accounts: {\n        registrar: registrar.publicKey,\n        member: member.publicKey,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        pendingWithdrawal: pendingWithdrawal.publicKey,\n        vault: balances.vault,\n        vaultPw: balances.vaultPw,\n        memberSigner: (\n          await memberSigner(\n            registryClient.programId,\n            registrar.publicKey,\n            member.publicKey,\n          )\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n\n    const updatedPendingWithdrawal = {\n      publicKey: pendingWithdrawal.publicKey,\n      account: {\n        ...pendingWithdrawal.account,\n        burned: true,\n      },\n    };\n\n    dispatch({\n      type: ActionType.RegistryUpdatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: updatedPendingWithdrawal,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer completed`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  let disabled = false;\n  let color = skin.instance().ready;\n  let onClick = async () =>\n    endPendingWithdrawal().catch(err => {\n      console.error(`Error completing transfer: ${err.toString()}`);\n      enqueueSnackbar(\n        `Error completing transfer. Wait for the transfer's timelock to end and try again.`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  if (pendingWithdrawal.account.burned) {\n    disabled = true;\n    color = skin.instance().active;\n    onClick = async () => {};\n  }\n\n  if (pendingWithdrawal.account.endTs.toNumber() > Date.now() / 1000) {\n    disabled = true;\n    color = skin.instance().notReady;\n    onClick = async () => {};\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <IconButton disabled={disabled} style={{ width: '25px', height: '25px' }}>\n        <CheckCircleIcon style={{ color, fontSize: '20px' }} />\n      </IconButton>\n    </div>\n  );\n}\n\nfunction AllPendingTransfers() {\n  const { registryClient } = useWallet();\n  const { registrar, registrarAccount, mintAccount } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        registrar: state.registry.registrar,\n        registrarAccount,\n        mintAccount: state.accounts[registrarAccount.mint.toString()],\n      };\n    },\n  );\n  const [pendingTransfers, setPendingTransfers] = useState<null | any>(null);\n  useEffect(() => {\n    const fetchAll = async () => {\n      let transfers = await registryClient.account.pendingWithdrawal.all(\n        registrar.toBuffer(),\n      );\n      transfers = transfers\n        .filter((pw: any) => pw.account.burned === false)\n        .sort((a, b) => {\n          if (a.account.startTs < b.account.startTs) {\n            return 1;\n          } else if (a.account.startTs > b.account.startTs) {\n            return -1;\n          } else {\n            return 0;\n          }\n        });\n      setPendingTransfers(transfers);\n    };\n    fetchAll();\n  }, [registryClient, registrar]);\n\n  return (\n    <Card style={{ maxHeight: '900px', overflow: 'auto' }}>\n      <Typography\n        variant=\"h5\"\n        style={{ padding: '16px', borderBottom: 'solid 1pt #ccc' }}\n      >\n        All pending transfers\n      </Typography>\n      {pendingTransfers !== null ? (\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Member Account</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Pool</TableCell>\n              <TableCell>Locked</TableCell>\n              <TableCell>Start</TableCell>\n              <TableCell>End</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {pendingTransfers.map((pw: any) => (\n              <TableRow>\n                <TableCell>{pw.account.member.toString()}</TableCell>\n                <TableCell>\n                  {toDisplay(\n                    pw.account.amount.toString(),\n                    mintAccount.decimals,\n                  )}\n                </TableCell>\n                <TableCell>\n                  {pw.account.amount.div(registrarAccount.stakeRate).toString()}\n                </TableCell>\n                <TableCell>{pw.account.locked.toString()}</TableCell>\n                <TableCell>\n                  {new Date(pw.account.startTs.toNumber() * 1000).toString()}\n                </TableCell>\n                <TableCell>\n                  {new Date(pw.account.endTs.toNumber() * 1000).toString()}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      ) : (\n        <div style={{ padding: '24px' }}>\n          <CircularProgress\n            style={{\n              display: 'block',\n              marginLeft: 'auto',\n              marginRight: 'auto',\n            }}\n          />\n        </div>\n      )}\n    </Card>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { TransactionSignature } from '@solana/web3.js';\nimport { State as StoreState } from '../../store/reducer';\n\ntype Props = {\n  signature: string;\n};\n\nexport async function withTx(\n  snack: any,\n  beforeLabel: string,\n  afterLabel: string,\n  execTx: () => Promise<TransactionSignature>,\n) {\n  snack.enqueueSnackbar(beforeLabel, {\n    variant: 'info',\n  });\n  try {\n    let tx = await execTx();\n    snack.closeSnackbar();\n    snack.enqueueSnackbar(afterLabel, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  } catch (err) {\n    snack.enqueueSnackbar(`Error: ${err.toString()}`, {\n      variant: 'error',\n    });\n  }\n}\n\nexport function ViewTransactionOnExplorerButton(props: Props) {\n  const { signature } = props;\n  const { explorerClusterSuffix } = useSelector((state: StoreState) => {\n    return {\n      explorerClusterSuffix: state.common.network.explorerClusterSuffix,\n    };\n  });\n  const urlSuffix = `?cluster=${explorerClusterSuffix}`;\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n","import { Transaction, PublicKey, Account } from '@solana/web3.js';\nimport * as serumCmn from '@project-serum/common';\nimport * as anchor from '@project-serum/anchor';\n\nexport async function registrarSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\nexport async function memberSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n  member: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer(), member.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\nexport async function vendorSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n  vendor: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer(), vendor.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Returns the seed used to derive a member address. This is not necessary, but\n// a UX convenience. Each member address is a deterministic function of the\n// program, beneficiary, and this (constant) seed.\nexport async function memberSeed(registrar: PublicKey): Promise<string> {\n  const seed = await anchor.utils.sha256(`${registrar.toString()}:Member`);\n  // The max length of seeds allowed by Solana is 32.\n  return seed.slice(0, 32);\n}\n\n// Creates all the SPL otken vaults needed for constructing a `Member` account.\nexport async function createBalanceSandbox(\n  provider: serumCmn.Provider,\n  r: any,\n  registrySigner: PublicKey,\n) {\n  const spt = new Account();\n  const vault = new Account();\n  const vaultStake = new Account();\n  const vaultPw = new Account();\n\n  const lamports = await provider.connection.getMinimumBalanceForRentExemption(\n    165,\n  );\n\n  const createSptIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    spt.publicKey,\n    r.poolMint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vault.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultStakeIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vaultStake.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultPwIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vaultPw.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  let tx0 = new Transaction();\n  tx0.add(\n    ...createSptIx,\n    ...createVaultIx,\n    ...createVaultStakeIx,\n    ...createVaultPwIx,\n  );\n  let signers0 = [spt, vault, vaultStake, vaultPw];\n\n  const tx = { tx: tx0, signers: signers0 };\n\n  return [\n    tx,\n    {\n      spt: spt.publicKey,\n      vault: vault.publicKey,\n      vaultStake: vaultStake.publicKey,\n      vaultPw: vaultPw.publicKey,\n    },\n  ];\n}\n\n// Returns all events in the reward queue.\nexport function rewardEvents(rewardQ: any): any[] {\n  let events = [];\n  let tail = rewardQ.tail;\n  while (tail < rewardQ.head) {\n    let idx = tail % rewardQ.events.length;\n    events.push(rewardQ.events[idx]);\n    tail += 1;\n  }\n  return events;\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { AccountInfo as TokenAccount } from '@solana/spl-token';\nimport { ProgramAccount as CommonProgramAccount } from '@project-serum/common';\nimport { Action, ActionType } from './actions';\nimport { networks, Network } from './config';\n\nexport enum BootstrapState {\n  NeedsBootstrap,\n  IsBootstrapping,\n  Bootstrapped,\n}\n\nexport default function reducer(\n  state: State = initialState,\n  action: Action,\n): State {\n  let newState = {\n    common: { ...state.common },\n    lockup: { ...state.lockup },\n    registry: { ...state.registry },\n    accounts: { ...state.accounts },\n  };\n  switch (action.type) {\n    // Common.\n    case ActionType.CommonAppWillBootstrap:\n      newState.common.bootstrapState = BootstrapState.IsBootstrapping;\n      newState.common.bootstrapTrigger = false;\n      return newState;\n    case ActionType.CommonAppDidBootstrap:\n      newState.common.bootstrapState = BootstrapState.Bootstrapped;\n      return newState;\n    case ActionType.CommonWalletSetProvider:\n      newState.common.walletProvider = action.item.walletProvider;\n      return newState;\n    case ActionType.CommonWalletDidConnect:\n      newState.common.isWalletConnected = true;\n      return newState;\n    case ActionType.CommonWalletDidDisconnect:\n      newState.common.isWalletConnected = false;\n      return newState;\n    case ActionType.CommonSetNetwork:\n      if (newState.common.network.label !== action.item.network.label) {\n        newState.common.network = action.item.network;\n        newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n        newState.common.shutdownTrigger = true;\n        const network = networks[action.item.networkKey];\n        newState.registry.registrar = Object.values(network.registrars)[0];\n      }\n      return newState;\n    case ActionType.CommonTriggerBootstrap:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.bootstrapTrigger = true;\n      return newState;\n    case ActionType.CommonTriggerShutdown:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.shutdownTrigger = true;\n      return newState;\n    case ActionType.CommonDidShutdown:\n      // Reset everything except network and registrar.\n      let s = {\n        ...initialState,\n      };\n      s.common.network = newState.common.network;\n      s.registry.registrar = newState.registry.registrar;\n      return s;\n    case ActionType.CommonOwnedTokenAccountsSet:\n      newState.common.ownedTokenAccounts = action.item.ownedTokenAccounts;\n      return newState;\n\n    case ActionType.CommonOwnedTokenAccountsUpdate:\n      newState.common.ownedTokenAccounts = newState.common.ownedTokenAccounts.map(\n        programAccount => {\n          if (programAccount.publicKey.equals(action.item.account.publicKey)) {\n            return action.item.account;\n          } else {\n            return programAccount;\n          }\n        },\n      );\n      return newState;\n\n    // Lockup.\n    case ActionType.LockupSetVestings:\n      newState.lockup.vestings = action.item.vestingAccounts;\n      return newState;\n    case ActionType.LockupUpdateVesting:\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n    case ActionType.LockupCreateVesting:\n      newState.lockup.vestings.unshift(action.item.vesting.publicKey);\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n\n    // Registry.\n    case ActionType.RegistrySetMember:\n      // This should only be called on member creation. All other member\n      // member switches should route through `RegistrySetMember`.\n      newState.registry.member = action.item.member;\n      return newState;\n    case ActionType.RegistrySetRegistrar:\n      newState.registry.registrar = action.item.registrar;\n      newState.registry.member = action.item.member;\n      newState.registry.pendingWithdrawals = null;\n      return newState;\n    case ActionType.RegistrySetPendingWithdrawals:\n      action.item.pendingWithdrawals.forEach((pw: any) => {\n        newState.accounts[pw.publicKey.toString()] = pw.account;\n      });\n      newState.registry.pendingWithdrawals = action.item.pendingWithdrawals.map(\n        (pw: any) => pw.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryCreatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      if (newState.registry.pendingWithdrawals === null) {\n        newState.registry.pendingWithdrawals = [];\n      }\n      newState.registry.pendingWithdrawals.unshift(\n        action.item.pendingWithdrawal.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryUpdatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      return newState;\n    case ActionType.AccountAdd:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    case ActionType.AccountUpdate:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    default:\n      return newState;\n  }\n}\n\nexport type State = {\n  common: CommonState;\n  lockup: LockupState;\n  registry: RegistryState;\n  accounts: { [pubkey: string]: any };\n};\n\nexport type CommonState = {\n  walletProvider?: string;\n  isWalletConnected: boolean;\n  bootstrapTrigger: boolean;\n  bootstrapState: BootstrapState;\n  shutdownTrigger: boolean;\n  network: Network;\n  ownedTokenAccounts: ProgramAccount<TokenAccount>[];\n};\n\nexport type LockupState = {\n  vestings: PublicKey[];\n};\n\n// All state associated with a single instance of a staking registrar.\nexport type RegistryState = {\n  registrar: PublicKey;\n  member?: PublicKey;\n  pendingWithdrawals: PublicKey[] | null;\n};\n\nexport const initialState: State = {\n  common: {\n    bootstrapTrigger: false,\n    shutdownTrigger: false,\n    isWalletConnected: false,\n    walletProvider: 'https://www.sollet.io',\n    bootstrapState: BootstrapState.NeedsBootstrap,\n    network: networks.mainnet,\n    ownedTokenAccounts: [],\n  },\n  lockup: {\n    vestings: [],\n  },\n  registry: {\n    pendingWithdrawals: null,\n    registrar: networks.mainnet.registrars.srm,\n  },\n  accounts: {},\n};\n\nexport type AsyncData<T> = {\n  isReady: boolean;\n  data?: T;\n};\n\n// Re-export.\nexport type ProgramAccount<T = any> = CommonProgramAccount<T>;\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\n","import React, {\n  PropsWithChildren,\n  ReactNode,\n  useEffect,\n  useCallback,\n} from 'react';\nimport * as BufferLayout from 'buffer-layout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  parseMintAccount,\n  parseTokenAccount,\n} from '@project-serum/common';\nimport * as anchor from '@project-serum/anchor';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from './WalletProvider';\nimport { memberSeed } from '../../utils/registry';\n\n// BootstrapProvider performs data fetching on application startup.\nexport default function BootstrapProvider(props: PropsWithChildren<ReactNode>) {\n  const { bootstrapTrigger, shutdownTrigger, network, registrar } = useSelector(\n    (state: StoreState) => {\n      return {\n        bootstrapTrigger: state.common.bootstrapTrigger,\n        shutdownTrigger: state.common.shutdownTrigger,\n        network: state.common.network,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const { wallet, lockupClient, registryClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Entry point for bootstrapping all the data for the app.\n  const bootstrap = useCallback(async () => {\n    enqueueSnackbar(`Connecting to ${network.label}`, {\n      variant: 'info',\n      autoHideDuration: 2500,\n    });\n\n    dispatch({\n      type: ActionType.CommonAppWillBootstrap,\n      item: {},\n    });\n\n    let { registrars, members } = await refreshAccounts({\n      dispatch,\n      lockupClient,\n      registryClient,\n      network,\n      wallet,\n    });\n\n    // Temporary account store for the initial registrar switch.\n    const accountStore = Object.fromEntries(\n      new Map(registrars.map(r => [r.publicKey.toString(), r.account])),\n    );\n    members.forEach(m => {\n      accountStore[m.publicKey.toString()] = m.account;\n    });\n\n    await registrarSwitch(\n      registryClient,\n      accountStore,\n      dispatch,\n      registrar,\n      undefined,\n    );\n\n    dispatch({\n      type: ActionType.CommonAppDidBootstrap,\n      item: {},\n    });\n\n    enqueueSnackbar(`Connection established`, {\n      variant: 'success',\n      autoHideDuration: 2500,\n    });\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    registryClient,\n    registrar,\n    lockupClient,\n    network,\n    wallet,\n  ]);\n\n  const shutdown = useCallback(async () => {\n    wallet.disconnect();\n    dispatch({\n      type: ActionType.CommonDidShutdown,\n      item: {},\n    });\n  }, [dispatch, wallet]);\n\n  useEffect(() => {\n    if (bootstrapTrigger) {\n      bootstrap().catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error bootstrapping application: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n    if (shutdownTrigger) {\n      shutdown().catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error shutting down application: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  }, [bootstrapTrigger, bootstrap, shutdownTrigger, shutdown, enqueueSnackbar]);\n\n  return <>{props.children}</>;\n}\n\n// Fetches and populates the redux store with all accounts needed for the app to start.\nexport async function refreshAccounts({\n  dispatch,\n  lockupClient,\n  registryClient,\n  network,\n  wallet,\n}: any) {\n  // Fetch all staking instances.\n  const fetchRegistrars = async (): Promise<ProgramAccount[]> => {\n    const registrarAddresses: PublicKey[] = Object.values(network.registrars);\n\n    // All registrars.\n    const registrars: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrarAddresses,\n      )\n    ).map(raw => {\n      const account = registryClient.coder.accounts.decode(\n        'Registrar',\n        raw!.account.data,\n      );\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Mint for each registrar.\n    const mints: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrars.map(r => r.account.mint),\n      )\n    ).map(raw => {\n      const account = parseMintAccount(raw!.account.data);\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Reward queues for each registrar.\n    const rewardQs = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrars.map(r => r.account.rewardEventQ),\n      )\n    ).map(raw => {\n      const account = registryClient.coder.accounts.decode(\n        'RewardQueue',\n        raw!.account.data,\n      );\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Add all the accounts to the store.\n    registrars\n      .concat(mints)\n      .concat(rewardQs)\n      .forEach(r => {\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: r,\n          },\n        });\n      });\n    return registrars;\n  };\n\n  // Fetch the stake accounts for each staking instance (for the connected wallet).\n  const fetchMembers = async (\n    registrars: ProgramAccount[],\n  ): Promise<ProgramAccount[]> => {\n    const members = await Promise.all(\n      registrars\n        .map((r: ProgramAccount) => r.publicKey)\n        .map((r: PublicKey) =>\n          memberSeed(r)\n            .then(seed =>\n              PublicKey.createWithSeed(\n                wallet.publicKey,\n                seed,\n                registryClient.programId,\n              ),\n            )\n            .then(member => {\n              return {\n                memberPublicKey: member,\n                registrar: r,\n              };\n            }),\n        ),\n    );\n    const memberAddresses: PublicKey[] = members.map(m => m.memberPublicKey);\n    const memberAccounts: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        memberAddresses,\n      )\n    )\n      .filter(raw => raw !== null)\n      .map((raw: any) => {\n        const account = registryClient.coder.accounts.decode(\n          'Member',\n          raw!.account.data,\n        );\n        return {\n          publicKey: raw!.publicKey,\n          account,\n        };\n      });\n\n    // Get all accounts for all of our member accounts.\n    //\n    // Note: As the number of registrars grows, we'll probably want to move\n    //       this fetch to be an on demand query, rather than on application\n    //       bootstrap.\n    await Promise.all(\n      memberAccounts.map(memberAccount => {\n        return fetchAndDispatchMemberAccounts(\n          memberAccount,\n          dispatch,\n          registryClient.provider.connection,\n        );\n      }),\n    );\n\n    // Add all the member accounts to the store. Must be done *after* the\n    // active member's vaults.\n    memberAccounts.forEach(m => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account: m,\n        },\n      });\n    });\n\n    return memberAccounts;\n  };\n\n  // All mints for each staking instance (pool token and the token being staked).\n  const fetchMints = async (registrars: ProgramAccount[]) => {\n    const mintAddresses = registrars\n      .map(r => r.account.mint)\n      .concat(registrars.map(r => r.account.poolMint));\n    const mints = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        mintAddresses,\n      )\n    ).map(raw => {\n      const account = parseMintAccount(raw!.account.data);\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n    mints.forEach(m => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account: m,\n        },\n      });\n    });\n  };\n\n  // All token accounts owned by the current user.\n  const fetchOwnedTokenAccounts = async () => {\n    const ownedTokenAccounts = await getOwnedTokenAccounts(\n      lockupClient.provider.connection,\n      wallet.publicKey,\n    );\n    dispatch({\n      type: ActionType.CommonOwnedTokenAccountsSet,\n      item: {\n        ownedTokenAccounts,\n      },\n    });\n  };\n\n  // All vesting accounts owned by the current user.\n  const fetchVestingAccounts = async () => {\n    const vestingAccounts = await lockupClient.account.vesting.all(\n      wallet.publicKey.toBuffer(),\n    );\n    vestingAccounts.forEach((account: any) => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account,\n        },\n      });\n    });\n    dispatch({\n      type: ActionType.LockupSetVestings,\n      item: {\n        vestingAccounts: vestingAccounts.map(\n          (v: ProgramAccount) => v.publicKey,\n        ),\n      },\n    });\n  };\n\n  const registrars = await fetchRegistrars();\n  const members = await fetchMembers(registrars);\n  await fetchMints(registrars);\n  await fetchOwnedTokenAccounts();\n  await fetchVestingAccounts();\n\n  return { registrars, members };\n}\n\nexport async function registrarSwitch(\n  registryClient: any,\n  accounts: any,\n  dispatch: any,\n  newRegistrar: PublicKey,\n  oldRegistrar?: PublicKey,\n) {\n  const oldMember = await (async (): Promise<ProgramAccount | undefined> => {\n    if (oldRegistrar === undefined) {\n      return undefined;\n    }\n    const oldMember = await PublicKey.createWithSeed(\n      registryClient.provider.wallet.publicKey,\n      await memberSeed(oldRegistrar),\n      registryClient.programId,\n    );\n    const oldMemberAccount = accounts[oldMember.toString()];\n    return oldMemberAccount !== undefined\n      ? {\n          publicKey: oldMember,\n          account: oldMemberAccount,\n        }\n      : undefined;\n  })();\n\n  const newMember = await (async (): Promise<ProgramAccount | undefined> => {\n    const newMember = await PublicKey.createWithSeed(\n      registryClient.provider.wallet.publicKey,\n      await memberSeed(newRegistrar),\n      registryClient.programId,\n    );\n    const newMemberAccount = accounts[newMember.toString()];\n    return newMemberAccount\n      ? {\n          publicKey: newMember,\n          account: newMemberAccount,\n        }\n      : undefined;\n  })();\n\n  await subscribeRegistrar(\n    registryClient,\n    accounts,\n    dispatch,\n    newRegistrar,\n    oldRegistrar,\n  );\n  if (newMember) {\n    unsubscribeMember(registryClient, oldMember);\n    subscribeMember(newMember, registryClient, dispatch);\n  }\n\n  // Perform the UI update.\n  dispatch({\n    type: ActionType.RegistrySetRegistrar,\n    item: {\n      registrar: newRegistrar,\n      member: newMember ? newMember.publicKey : undefined,\n    },\n  });\n}\n\nexport async function subscribeRegistrar(\n  registryClient: any,\n  accounts: any,\n  dispatch: any,\n  newRegistrar: PublicKey,\n  oldRegistrar?: PublicKey,\n) {\n  if (oldRegistrar) {\n    const oldRegistrarAccount = accounts[oldRegistrar.toString()];\n    registryClient.account.rewardQueue.unsubscribe(\n      oldRegistrarAccount.rewardEventQ,\n    );\n    // TODO: unsubscribe from the staking pool subscription.\n  }\n\n  const newRegistrarAccount = accounts[newRegistrar.toString()];\n\n  // Reward event queue sub.\n  const conn = registryClient.account.rewardQueue.subscribe(\n    newRegistrarAccount.rewardEventQ,\n  );\n  conn.on('change', (account: any) => {\n    dispatch({\n      type: ActionType.AccountUpdate,\n      item: {\n        account: {\n          publicKey: newRegistrarAccount.rewardEventQ,\n          account,\n        },\n      },\n    });\n  });\n\n  // Staking pool token sub.\n  // TODO: track these connections somewhere more organized.\n  registryClient.provider.connection.onAccountChange(\n    newRegistrarAccount.poolMint,\n    (acc: any) => {\n      const poolMint = parseMintAccount(acc.data);\n      dispatch({\n        type: ActionType.AccountUpdate,\n        item: {\n          account: {\n            publicKey: newRegistrarAccount.poolMint,\n            account: poolMint,\n          },\n        },\n      });\n    },\n    'recent',\n  );\n}\n\nexport function subscribeMember(\n  newMember: ProgramAccount,\n  registryClient: any,\n  dispatch: any,\n) {\n  // Subscribe to all member account updates.\n  registryClient.account.member\n    .subscribe(newMember.publicKey)\n    .on('change', (account: any) => {\n      dispatch({\n        type: ActionType.AccountUpdate,\n        item: {\n          account: {\n            publicKey: newMember.publicKey,\n            account,\n          },\n        },\n      });\n    });\n\n  // Subscription function, updating the redux store on every change\n  // to a token account.\n  //\n  // TODO: should track these subscriptions for unsubscribing on demand.\n  const createVaultSubscription = (address: PublicKey) => {\n    registryClient.provider.connection.onAccountChange(\n      address,\n      (acc: any) => {\n        const tokenAccount = parseTokenAccount(acc.data);\n        dispatch({\n          type: ActionType.AccountUpdate,\n          item: {\n            account: {\n              publicKey: address,\n              account: tokenAccount,\n            },\n          },\n        });\n      },\n      'recent',\n    );\n  };\n\n  // Subscribe to all the member's token vaults.\n  createVaultSubscription(newMember.account.balances.vault);\n  createVaultSubscription(newMember.account.balances.vaultStake);\n  createVaultSubscription(newMember.account.balances.vaultPw);\n  createVaultSubscription(newMember.account.balances.spt);\n  createVaultSubscription(newMember.account.balancesLocked.vault);\n  createVaultSubscription(newMember.account.balancesLocked.vaultStake);\n  createVaultSubscription(newMember.account.balancesLocked.vaultPw);\n  createVaultSubscription(newMember.account.balancesLocked.spt);\n}\n\nfunction unsubscribeMember(registryClient: any, newMember?: ProgramAccount) {\n  // todo\n}\n\n// Fetches all accounts for a member account and populates the store with them.\nexport async function fetchAndDispatchMemberAccounts(\n  memberAccount: ProgramAccount,\n  dispatch: any,\n  connection: any,\n) {\n  let accounts = (\n    await anchor.utils.getMultipleAccounts(connection, [\n      memberAccount.account.balances.vault,\n      memberAccount.account.balances.vaultStake,\n      memberAccount.account.balances.vaultPw,\n      memberAccount.account.balances.spt,\n      memberAccount.account.balancesLocked.vault,\n      memberAccount.account.balancesLocked.vaultStake,\n      memberAccount.account.balancesLocked.vaultPw,\n      memberAccount.account.balancesLocked.spt,\n    ])\n  )\n    .filter(raw => raw !== null)\n    .map((raw: any) => {\n      return {\n        publicKey: raw.publicKey,\n        account: parseTokenAccount(raw.account.data),\n      };\n    });\n  accounts.forEach(account => {\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account,\n      },\n    });\n  });\n}\n\nexport async function getOwnedTokenAccounts(connection: Connection, publicKey: PublicKey) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection.getProgramAccounts(\n    TOKEN_PROGRAM_ID,\n    {\n      filters,\n    },\n  );\n  const result =  resp\n    .map(({ pubkey, account: { data } }) => {\n      return {\n        publicKey: new PublicKey(pubkey),\n        account: parseTokenAccountData(data),\n      };\n    });\n\n  return result;\n}\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, 'mint'),\n  BufferLayout.blob(32, 'owner'),\n  BufferLayout.nu64('amount'),\n  BufferLayout.blob(93),\n]);\n\n\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n\nexport function parseTokenAccountData(data: any) {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount,\n  };\n}\n","import React, { useState, useEffect, ReactElement } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSnackbar } from \"notistack\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Select from \"@material-ui/core/Select\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport Button from \"@material-ui/core/Button\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport BubbleChartIcon from \"@material-ui/icons/BubbleChart\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  WalletDialogProvider,\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-material-ui\";\nimport { Popper, MenuList, MenuItem, Grow } from \"@material-ui/core\";\nimport { refreshAccounts } from \"./BootstrapProvider\";\nimport { networks } from \"../../store/config\";\nimport {\n  State as StoreState,\n  ProgramAccount,\n  BootstrapState,\n} from \"../../store/reducer\";\nimport { ActionType } from \"../../store/actions\";\nimport { useWallet } from \"./WalletProvider\";\n\ntype HeaderProps = {\n  isAppReady: boolean;\n  member?: ProgramAccount;\n};\n\nexport default function Header(props: HeaderProps) {\n  const { isAppReady } = props;\n  const { network } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      isAppReady:\n        state.common.isWalletConnected &&\n        state.common.bootstrapState === BootstrapState.Bootstrapped,\n    };\n  });\n  const dispatch = useDispatch();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient, lockupClient } = useWallet();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  return (\n    <AppBar\n      position=\"static\"\n      style={{\n        background: \"#ffffff\",\n        color: \"#272727\",\n        boxShadow: \"none\",\n        borderBottom: \"solid 1pt #ccc\",\n      }}\n    >\n      <Toolbar>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n          }}\n        >\n          <div style={{ display: \"flex\" }}>\n            <SerumLogoButton />\n            <BarButton label=\"Stake\" hrefClient=\"/stake\" />\n            <BarButton label=\"Lockup\" hrefClient=\"/lockup\" />\n            <BarButton\n              label=\"Multisig\"\n              href=\"https://multisig.projectserum.com\"\n            />\n            <BarButton label=\"Trade\" href=\"https://dex.projectserum.com\" />\n            {network.srmFaucet && (\n              <BarButton\n                label=\"Faucet\"\n                href=\"https://www.spl-token-ui.com/#/token-faucets\"\n              />\n            )}\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n            }}\n          >\n            <div\n              onClick={() => {\n                setIsRefreshing(true);\n                enqueueSnackbar(`Refreshing`, {\n                  variant: \"info\",\n                });\n                refreshAccounts({\n                  dispatch,\n                  lockupClient,\n                  registryClient,\n                  network,\n                  wallet,\n                })\n                  .then(() => {\n                    setIsRefreshing(false);\n                    closeSnackbar();\n                  })\n                  .catch((err) => {\n                    setIsRefreshing(false);\n                    closeSnackbar();\n                    enqueueSnackbar(`There was a problem refreshing: ${err}`, {\n                      variant: \"error\",\n                      autoHideDuration: 2500,\n                    });\n                  });\n              }}\n              style={{\n                display: isAppReady ? \"block\" : \"none\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n                marginRight: \"10px\",\n              }}\n            >\n              {isRefreshing ? (\n                <div\n                  style={{\n                    marginTop: \"8px\",\n                    padding: \"10px\",\n                  }}\n                >\n                  <CircularProgress style={{ width: \"24px\", height: \"24px\" }} />\n                </div>\n              ) : (\n                <div>\n                  <IconButton>\n                    <RefreshIcon />\n                  </IconButton>\n                </div>\n              )}\n            </div>\n            <NetworkSelector />\n            <WalletConnectButton />\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction SerumLogoButton() {\n  const history = useHistory();\n  return (\n    <div style={{ display: \"flex\" }} onClick={() => history.push(\"/\")}>\n      <Button color=\"inherit\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <img\n            style={{\n              display: \"block\",\n              height: \"35px\",\n            }}\n            alt=\"Logo\"\n            src=\"http://dex.projectserum.com/static/media/logo.49174c73.svg\"\n          />\n        </div>\n      </Button>\n    </div>\n  );\n}\n\ntype BarButtonProps = {\n  label: string;\n  hrefClient?: string;\n  href?: string;\n};\n\nfunction BarButton(props: BarButtonProps) {\n  const history = useHistory();\n  const { label, href, hrefClient } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n      onClick={() => hrefClient && history.push(hrefClient)}\n    >\n      <Link\n        style={{ color: \"inherit\", textDecoration: \"none\" }}\n        href={href}\n        target=\"_blank\"\n      >\n        <Button color=\"inherit\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Typography style={{ fontSize: \"15px\" }}>{label}</Typography>\n          </div>\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nfunction NetworkSelector() {\n  const network = useSelector((state: StoreState) => {\n    return state.common.network;\n  });\n  const dispatch = useDispatch();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        marginRight: \"10px\",\n        fontSize: \"15px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        color=\"inherit\"\n        onClick={(e) =>\n          setAnchorEl(\n            // @ts-ignore\n            e.currentTarget\n          )\n        }\n      >\n        <BubbleChartIcon />\n        <Typography style={{ marginLeft: \"5px\", fontSize: \"15px\" }}>\n          {network.label}\n        </Typography>\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        style={{\n          marginLeft: \"12px\",\n          color: \"white\",\n        }}\n      >\n        {Object.keys(networks).map((n: string) => (\n          <MenuItem\n            key={n}\n            onClick={() => {\n              handleClose();\n              dispatch({\n                type: ActionType.CommonSetNetwork,\n                item: {\n                  network: networks[n],\n                  networkKey: n,\n                },\n              });\n            }}\n          >\n            <Typography>{networks[n].label}</Typography>\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n\nexport function WalletConnectButton(): ReactElement {\n  const { showDisconnect } = useSelector((state: StoreState) => {\n    return {\n      showDisconnect: state.common.isWalletConnected,\n    };\n  });\n  const dispatch = useDispatch();\n  const { wallet, lockupClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Wallet connection event listeners.\n  useEffect(() => {\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Disconnected from wallet\", {\n        variant: \"info\",\n        autoHideDuration: 2500,\n      });\n      dispatch({\n        type: ActionType.CommonWalletDidDisconnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerShutdown,\n        item: {},\n      });\n    });\n    wallet.on(\"connect\", async () => {\n      dispatch({\n        type: ActionType.CommonWalletDidConnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerBootstrap,\n        item: {},\n      });\n    });\n  }, [wallet, dispatch, enqueueSnackbar, lockupClient.provider.connection]);\n\n  return (\n    <WalletDialogProvider>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n        onClick={() => wallet.disconnect()}\n      >\n        <WalletDisconnectButton />\n      </div>\n      <div\n        onClick={() => wallet.connect()}\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        <WalletMultiButton />\n      </div>\n    </WalletDialogProvider>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nexport default function Footer() {\n  return (\n    <div\n      style={{\n        zIndex: 99,\n        position: 'fixed',\n        width: '100%',\n        bottom: 0,\n        textAlign: 'center',\n        height: '30px',\n        backgroundColor: '#fbfbfb',\n        borderTop: 'solid 1pt #ccc',\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingLeft: '10px',\n        paddingRight: '10px',\n      }}\n    >\n      <div style={{ marginLeft: 'auto', marginRight: 'auto', display: 'flex' }}>\n        <FooterButton\n          href={\n            'https://github.com/project-serum/anchor/blob/master/examples/lockup/docs/staking.md'\n          }\n          label={'Technical Documentation'}\n        />\n        <FooterButton\n          href={'https://github.com/project-serum/awesome-serum'}\n          label={'Developer Resources'}\n        />\n        <FooterButton\n          href={'https://discord.com/channels/739225212658122886'}\n          label={'Discord'}\n        />\n        <FooterButton href={'https://t.me/ProjectSerum'} label={'Telegram'} />\n        <FooterButton\n          href={'https://github.com/project-serum'}\n          label={'GitHub'}\n        />\n        <FooterButton\n          href={'https://solanabeach.io/'}\n          label={'Solana Network'}\n          isEnd={true}\n        />\n      </div>\n    </div>\n  );\n}\n\ntype FooterButtonProps = {\n  label: string;\n  href: string;\n  isEnd?: boolean;\n};\n\nfunction FooterButton(props: FooterButtonProps) {\n  const { label, href, isEnd } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        marginRight: isEnd ? '' : '15px',\n      }}\n    >\n      <Link href={href} target=\"_blank\" color=\"inherit\">\n        <Typography style={{ fontSize: '14px' }}>{label}</Typography>\n      </Link>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from 'react';\nimport { useSelector } from 'react-redux';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Button from '@material-ui/core/Button';\nimport { State as StoreState, BootstrapState } from '../../store/reducer';\nimport Header from './Header';\nimport Footer from './Footer';\n\ntype Props = {};\n\nexport default function Layout(props: PropsWithChildren<Props>) {\n  const { isAppReady } = useSelector((state: StoreState) => {\n    return {\n      isAppReady:\n        state.common.isWalletConnected &&\n        state.common.bootstrapState === BootstrapState.Bootstrapped,\n    };\n  });\n  const [refresh, setRefresh] = useState(false);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        minHeight: '100vh',\n        flexDirection: 'column',\n        backgroundColor: 'rgb(251, 251, 251)',\n      }}\n    >\n      <div\n        style={{\n          position: 'fixed',\n          width: '100%',\n          zIndex: 99,\n        }}\n      >\n        <RiskBar />\n        <Header isAppReady={isAppReady} />\n      </div>\n      <div\n        style={{\n          width: '100%',\n          marginTop: '94px',\n          flex: 1,\n          display: 'flex',\n          marginBottom: '30px', // Compensates for the fixed position footer.\n        }}\n      >\n        {window.localStorage.getItem('consent') ? (\n          !isAppReady ? (\n            <DisconnectedSplash />\n          ) : (\n            <div style={{ width: '100%' }}>{props.children}</div>\n          )\n        ) : (\n          <RiskDisclosureForm\n            onConsent={() => {\n              window.localStorage.setItem('consent', 'true');\n              setRefresh(!refresh);\n            }}\n          />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction RiskBar() {\n  return (\n    <div\n      style={{\n        color: '#fff',\n        backgroundColor: 'rgb(39, 39, 39)',\n        height: '30px',\n        textAlign: 'center',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          height: '100%',\n        }}\n      >\n        <Typography style={{ fontSize: '14px' }}>\n          Stake is unaudited software. Use at your own risk.\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nfunction RiskDisclosureForm({ onConsent }: { onConsent: () => void }) {\n  return (\n    <div\n      style={{\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n      }}\n    >\n      <div style={{ width: '100%', display: 'flex' }}>\n        <div\n          style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}\n        >\n          <Typography\n            style={{ marginBottom: '16px', maxWidth: '1000px' }}\n            color=\"textSecondary\"\n            variant=\"h4\"\n          >\n            No statement or warranty is provided in relation to the utility of\n            this program, the safety of its code or its suitability for your\n            use, and by using it, you agree to bear any risk associated with\n            such potential vulnerabilities, including, but not limited to the\n            potential loss of tokens.\n          </Typography>\n        </div>\n      </div>\n      <div style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onConsent}>\n          I agree\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction DisconnectedSplash() {\n  const classes = useStyles();\n  const { network, isDisconnected } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      isDisconnected: !state.common.isWalletConnected,\n    };\n  });\n  return (\n    <div\n      style={{\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n      }}\n    >\n      <div style={{ width: '100%', display: 'flex' }}>\n        {isDisconnected ? (\n          <div\n            style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}\n          >\n            <Typography\n              style={{ marginLeft: '24px' }}\n              color=\"textSecondary\"\n              variant=\"h4\"\n            >\n              Disconnected\n            </Typography>\n          </div>\n        ) : (\n          <div style={{ width: '100%' }}>\n            <div style={{ width: '100%' }} className={classes.root}>\n              <div>\n                <Typography variant=\"h5\">\n                  {`Connecting to ${network.label}...`}\n                </Typography>\n              </div>\n              <div\n                style={{\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                  width: '300px',\n                }}\n              >\n                <LinearProgress style={{ width: '100%' }} />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { TokenInfo } from '@solana/spl-token-registry';\nimport { useTokenInfos } from '../../utils/tokens';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport * as bootstrap from './BootstrapProvider';\nimport { useWallet } from './WalletProvider';\n\nexport function activeRegistrar(\n  state: StoreState,\n): { label: string; programAccount: any } {\n  const registrars = Object.keys(state.common.network.registrars)\n    .map(registrar => {\n      let entry: [string, ProgramAccount] = [\n        registrar,\n        {\n          publicKey: state.common.network.registrars[registrar],\n          account:\n            state.accounts[\n              state.common.network.registrars[registrar].toString()\n            ],\n        },\n      ];\n      return entry;\n    })\n    .filter(r => r[1].account !== undefined);\n  const selectedRegistrar: any = registrars\n    .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n    .map(([r, acc]) => {\n      return {\n        label: r,\n        programAccount: acc,\n      };\n    })\n    .pop();\n\n  return selectedRegistrar;\n}\n\nexport default function RegistrarSelect() {\n  const { registryClient } = useWallet();\n  const { registrars, selectedRegistrar, accounts, network } = useSelector(\n    (state: StoreState) => {\n      const registrars = Object.keys(state.common.network.registrars)\n        .map(registrar => {\n          let entry: [string, ProgramAccount] = [\n            registrar,\n            {\n              publicKey: state.common.network.registrars[registrar],\n              account:\n                state.accounts[\n                  state.common.network.registrars[registrar].toString()\n                ],\n            },\n          ];\n          return entry;\n        })\n        .filter(r => r[1].account !== undefined);\n      const selectedRegistrar: any = registrars\n        .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n        .map(([r, acc]) => {\n          return {\n            label: r,\n            programAccount: acc,\n          };\n        })\n        .pop();\n      return {\n        network: state.common.network,\n        accounts: state.accounts,\n        registrars,\n        selectedRegistrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const tokenInfos = useTokenInfos();\n\n  return (\n    <Select\n      style={{ width: '294px', height: '36px' }}\n      variant={'outlined'}\n      fullWidth\n      value={selectedRegistrar.label}\n      onChange={async e => {\n        const registrar: ProgramAccount = registrars\n          .filter(([r, acc]) => r === e.target.value)\n          .map(([r, acc]) => acc)\n          .pop()!;\n\n        bootstrap.registrarSwitch(\n          registryClient,\n          accounts,\n          dispatch,\n          registrar!.publicKey, // New.\n          selectedRegistrar.programAccount.publicKey, // Old.\n        );\n      }}\n    >\n      {registrars.length === 0 ? (\n        <MenuItem value={'_loading'}>Loading registrars...</MenuItem>\n      ) : (\n        registrars.map(([label, registrar]) => {\n          return (\n            <MenuItem key={label} value={label}>\n              <div style={{ display: 'flex' }}>\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {getImage(tokenInfos.get(registrar.account.mint.toString()))}\n                </div>\n                <div\n                  style={{\n                    overflow: 'hidden',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {`${registrarToDisplayLabel(registrar, network)}`}\n                </div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction registrarToDisplayLabel(\n  registrar: ProgramAccount,\n  network: Network,\n): string {\n  const entry = Object.keys(network.registrars)\n    .filter(r => network.registrars[r].equals(registrar.publicKey))\n    .pop();\n  if (entry !== undefined) {\n    return entry.toUpperCase();\n  }\n  return registrar.publicKey.toString();\n}\n\nexport function getImage(token?: TokenInfo, style?: any) {\n  if (token) {\n    return (\n      <img\n        alt=\"Token Icon\"\n        style={style ?? { marginRight: '10px', height: '25px' }}\n        src={token.logoURI}\n      />\n    );\n  } else {\n    return <div style={{ marginLeft: '32px' }}></div>;\n  }\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { State as StoreState } from '../store/reducer';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\n\nexport default function Me() {\n  const { member } = useSelector((state: StoreState) => {\n    return {\n      member: state.registry.member,\n    };\n  });\n\n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n        {member && <MemberBalancesCard />}\n      </div>\n    </div>\n  );\n}\n\n// Assumes a member and all vaults is available in the store.\nfunction MemberBalancesCard() {\n  const {\n    mint,\n    registrar,\n    vault,\n    vaultStake,\n    vaultPw,\n    spt,\n    lockedVault,\n    lockedVaultStake,\n    lockedVaultPw,\n    lockedSpt,\n  } = useSelector((state: StoreState) => {\n    const member = state.accounts[state.registry.member!.toString()];\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar,\n      mint: state.accounts[registrar.mint.toString()],\n      vault: state.accounts[member.balances.vault],\n      vaultStake: state.accounts[member.balances.vaultStake],\n      vaultPw: state.accounts[member.balances.vaultPw],\n      spt: state.accounts[member.balances.spt],\n      lockedVault: state.accounts[member.balancesLocked.vault],\n      lockedVaultStake: state.accounts[member.balancesLocked.vaultStake],\n      lockedVaultPw: state.accounts[member.balancesLocked.vaultPw],\n      lockedSpt: state.accounts[member.balancesLocked.spt],\n    };\n  });\n  const tables = [\n    {\n      title: 'Main Balances',\n      description: 'Balances deposited directly from the connected wallet.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(vault.amount, mint.decimals),\n          stake: toDisplay(vaultStake.amount, mint.decimals),\n          pending: toDisplay(vaultPw.amount, mint.decimals),\n          spt: toDisplay(spt.amount, 0),\n        },\n      ],\n    },\n    {\n      title: 'Locked Balances',\n      description:\n        'Balances deposited from the lockup program. These funds are isolated from the Main Balances and may only be withdrawn back to the lockup program. At all times they are program controlled.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(lockedVault.amount, mint.decimals),\n          stake: toDisplay(lockedVaultStake.amount, mint.decimals),\n          pending: toDisplay(lockedVaultPw.amount, mint.decimals),\n          spt: toDisplay(lockedSpt.amount, 0),\n        },\n      ],\n    },\n  ];\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <CardContent\n        style={{\n          marginTop: '24px',\n          position: 'relative',\n          paddingTop: 0,\n          paddingBottom: '16px',\n        }}\n      >\n        {tables.map(t => (\n          <BalanceTable\n            key={t.title}\n            title={t.title}\n            description={t.description}\n            rows={t.rows}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n\ntype BalanceTableProps = {\n  title: string;\n  description: string;\n  rows:\n    | null\n    | {\n        token: string;\n        balance: string;\n        stake: string;\n        pending: string;\n        spt: string;\n      }[];\n};\n\nfunction BalanceTable(props: BalanceTableProps) {\n  const { title, rows, description } = props;\n  return (\n    <div style={{ marginBottom: '16px' }}>\n      <Typography style={{ fontWeight: 'bold' }}>{title}</Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n        {description}\n      </Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Token</TableCell>\n              <TableCell align=\"right\">Available</TableCell>\n              <TableCell align=\"right\">Pending</TableCell>\n              <TableCell align=\"right\">Staked</TableCell>\n              <TableCell align=\"right\">Pool</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows === null ? (\n              <CircularProgress />\n            ) : (\n              rows.map(row => (\n                <TableRow key={row.token}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.token}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.balance}</TableCell>\n                  <TableCell align=\"right\">{row.pending}</TableCell>\n                  <TableCell align=\"right\">{row.stake}</TableCell>\n                  <TableCell align=\"right\">{row.spt}</TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { simulateTransaction } from '@project-serum/common';\n\nexport async function vestingSigner(\n  programId: PublicKey,\n  vesting: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [vesting.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Simulates the `availableForWithdrawal` instruction to funnel out a the\n// emitted log data (as a hack to get a return value).\nexport async function availableForWithdrawal(\n  lockupClient: anchor.Program,\n  vesting: PublicKey,\n): Promise<anchor.BN> {\n  let tx = lockupClient.transaction.availableForWithdrawal({\n    accounts: {\n      vesting,\n      clock: SYSVAR_CLOCK_PUBKEY,\n    },\n  });\n  tx.setSigners(...[lockupClient.provider.wallet.publicKey]);\n  let resp = await simulateTransaction(\n    lockupClient.provider.connection,\n    tx,\n    'recent',\n  );\n  if (resp.value.err) {\n    throw new Error(`RPC error: ${resp.value.err.toString()}`);\n  }\n  let log = resp.value.logs![1].slice('Program log: '.length);\n  return new anchor.BN(JSON.parse(log).result);\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport * as serumCmn from '@project-serum/common';\nimport { TokenInstructions } from '@project-serum/serum';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport * as notification from '../common/Notification';\nimport { fromDisplay } from '../../utils/tokens';\nimport { Network } from '../../store/config';\nimport { activeRegistrar } from '../common/RegistrarSelect';\n\nexport default function DropRewardButton() {\n  const [showDialog, setShowDialog] = useState(false);\n  return (\n    <>\n      <div onClick={() => setShowDialog(true)}>\n        <Button variant=\"contained\" color=\"secondary\">\n          Drop Rewards\n        </Button>\n      </div>\n      <DropRewardDialog\n        open={showDialog}\n        onClose={() => setShowDialog(false)}\n      />\n    </>\n  );\n}\n\nenum RewardTypeViewModel {\n  Unlocked,\n  Locked,\n}\n\ntype DropRewardsDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DropRewardDialog(props: DropRewardsDialogProps) {\n  const { open, onClose } = props;\n  const { selectedRegistrar } = useSelector((state: StoreState) => {\n    return {\n      selectedRegistrar: activeRegistrar(state),\n    };\n  });\n  const [rewardTypeTab, setRewardTypeTab] = useState(\n    RewardTypeViewModel.Unlocked,\n  );\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\n      <DialogTitle>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Typography variant=\"h4\" component=\"h2\">\n            {`Drop Rewards on ${selectedRegistrar.label.toUpperCase()} Stakers`}\n          </Typography>\n        </div>\n      </DialogTitle>\n      <DialogContent>\n        <Tabs value={rewardTypeTab} onChange={(_e, t) => setRewardTypeTab(t)}>\n          <Tab value={RewardTypeViewModel.Unlocked} label=\"Unlocked\" />\n          <Tab value={RewardTypeViewModel.Locked} label=\"Locked\" />\n        </Tabs>\n        {rewardTypeTab === RewardTypeViewModel.Unlocked && (\n          <DropUnlockedForm onClose={onClose} />\n        )}\n        {rewardTypeTab === RewardTypeViewModel.Locked && (\n          <DropLockedForm onClose={onClose} />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ntype DropUnlockedFormProps = {\n  onClose: () => void;\n};\n\nfunction DropUnlockedForm(props: DropUnlockedFormProps) {\n  const { onClose } = props;\n  const snack = useSnackbar();\n  const { registryClient } = useWallet();\n  const { network, registrar, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      registrar: {\n        publicKey: state.registry.registrar,\n        account: state.accounts[state.registry.registrar.toString()],\n      },\n      accounts: state.accounts,\n    };\n  });\n\n  const [rewardDisplayAmount, setRewardDisplayAmount] = useState<null | number>(\n    null,\n  );\n  const [expiryTs, setExpiryTs] = useState<null | number>(null);\n  const [depositor, setDepositor] = useState<null | PublicKey>(null);\n  const [mint, setMint] = useState<null | string>(null);\n\n  const isSendEnabled =\n    mint !== null &&\n    depositor !== null &&\n    rewardDisplayAmount !== null &&\n    rewardDisplayAmount >= 100 &&\n    expiryTs !== null;\n\n  const sendUnlockedReward = async () => {\n    await notification.withTx(\n      snack,\n      'Dropping unlocked reward...',\n      'Unlocked reward dropped',\n      async () => {\n        let mintAccount = accounts[network.mints[mint!].toString()];\n        if (!mintAccount) {\n          mintAccount = await serumCmn.getMintInfo(\n            registryClient.provider,\n            network.mints[mint!],\n          );\n        }\n\n        const lockedRewardAmount = fromDisplay(\n          rewardDisplayAmount!,\n          mintAccount.decimals,\n        );\n        const rewardKind = { unlocked: {} };\n        const vendor = new Account();\n        const vendorVault = new Account();\n        const [vendorSigner, nonce] = await PublicKey.findProgramAddress(\n          [registrar.publicKey.toBuffer(), vendor.publicKey.toBuffer()],\n          registryClient.programId,\n        );\n        return await registryClient.rpc.dropReward(\n          rewardKind,\n          lockedRewardAmount,\n          new BN(expiryTs!),\n          registryClient.provider.wallet.publicKey,\n          nonce,\n          {\n            accounts: {\n              registrar: registrar.publicKey,\n              rewardEventQ: registrar.account.rewardEventQ,\n              poolMint: registrar.account.poolMint,\n              vendor: vendor.publicKey,\n              vendorVault: vendorVault.publicKey,\n              depositor,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [vendorVault, vendor],\n            instructions: [\n              ...(await serumCmn.createTokenAccountInstrs(\n                registryClient.provider,\n                vendorVault.publicKey,\n                network.mints[mint!],\n                vendorSigner,\n              )),\n              await registryClient.account.rewardVendor.createInstruction(\n                vendor,\n              ),\n            ],\n          },\n        );\n      },\n    );\n    onClose();\n  };\n  const onClick = () => {\n    sendUnlockedReward().catch(err => {\n      console.error(err);\n      snack.enqueueSnackbar(\n        `Error dropping unlocked reward: ${err.toString()}`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  };\n  return (\n    <DropVendorForm\n      network={network}\n      mint={mint}\n      setMint={setMint}\n      setDepositor={setDepositor}\n      setRewardDisplayAmount={setRewardDisplayAmount}\n      expiryTs={expiryTs}\n      setExpiryTs={setExpiryTs}\n      onCancel={onClose}\n      onClick={onClick}\n      isSendEnabled={isSendEnabled}\n    />\n  );\n}\n\ntype DropLockedFormProps = DropUnlockedFormProps;\n\nfunction DropLockedForm(props: DropLockedFormProps) {\n  const { onClose } = props;\n  const snack = useSnackbar();\n  const { registryClient } = useWallet();\n  const { network, registrar, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      registrar: {\n        publicKey: state.registry.registrar,\n        account: state.accounts[state.registry.registrar.toString()],\n      },\n      accounts: state.accounts,\n    };\n  });\n\n  const [rewardDisplayAmount, setRewardDisplayAmount] = useState<null | number>(\n    null,\n  );\n  const [startTs, setStartTs] = useState<null | number>(null);\n  const [endTs, setEndTs] = useState<null | number>(null);\n  const [expiryTs, setExpiryTs] = useState<null | number>(null);\n  const [depositor, setDepositor] = useState<null | PublicKey>(null);\n  const [mint, setMint] = useState<null | string>(null);\n  const [periodCount, setPeriodCount] = useState(7);\n\n  const isSendEnabled =\n    startTs !== null &&\n    endTs !== null &&\n    mint !== null &&\n    depositor !== null &&\n    rewardDisplayAmount !== null &&\n    rewardDisplayAmount >= 100 &&\n    expiryTs !== null;\n\n  const sendLockedRewards = async () => {\n    await notification.withTx(\n      snack,\n      'Dropping locked reward...',\n      'Locked reward dropped',\n      async () => {\n        const rewardKind = {\n          locked: {\n            startTs: new BN(startTs!),\n            endTs: new BN(endTs!),\n            periodCount: new BN(periodCount),\n          },\n        };\n        const vendor = new Account();\n        const vendorVault = new Account();\n        const [vendorSigner, nonce] = await PublicKey.findProgramAddress(\n          [registrar.publicKey.toBuffer(), vendor.publicKey.toBuffer()],\n          registryClient.programId,\n        );\n        let mintAccount = accounts[network.mints[mint!].toString()];\n        const rewardAmount = fromDisplay(\n          rewardDisplayAmount!,\n          mintAccount.decimals,\n        );\n        return await registryClient.rpc.dropReward(\n          rewardKind,\n          rewardAmount,\n          new BN(expiryTs!),\n          registryClient.provider.wallet.publicKey,\n          nonce,\n          {\n            accounts: {\n              registrar: registrar.publicKey,\n              rewardEventQ: registrar.account.rewardEventQ,\n              poolMint: registrar.account.poolMint,\n              vendor: vendor.publicKey,\n              vendorVault: vendorVault.publicKey,\n              depositor,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [vendorVault, vendor],\n            instructions: [\n              ...(await serumCmn.createTokenAccountInstrs(\n                registryClient.provider,\n                vendorVault.publicKey,\n                network.mints[mint!],\n                vendorSigner,\n              )),\n              await registryClient.account.rewardVendor.createInstruction(\n                vendor,\n              ),\n            ],\n          },\n        );\n      },\n    );\n    onClose();\n  };\n\n  const onClick = () => {\n    sendLockedRewards().catch(err => {\n      snack.enqueueSnackbar(`Error dropping locked reward: ${err.toString()}`, {\n        variant: 'error',\n      });\n    });\n  };\n\n  return (\n    <DropVendorForm\n      network={network}\n      mint={mint}\n      setMint={setMint}\n      setDepositor={setDepositor}\n      setRewardDisplayAmount={setRewardDisplayAmount}\n      setStartTs={setStartTs}\n      setEndTs={setEndTs}\n      periodCount={periodCount}\n      setPeriodCount={setPeriodCount}\n      expiryTs={expiryTs}\n      setExpiryTs={setExpiryTs}\n      onCancel={onClose}\n      onClick={onClick}\n      isSendEnabled={isSendEnabled}\n    />\n  );\n}\n\ntype DropVendorFormProps = {\n  network: Network;\n  mint: string | null;\n  setMint: (mintLabel: string) => void;\n  setDepositor: (pk: PublicKey) => void;\n  setRewardDisplayAmount: (n: number) => void;\n  setStartTs?: (n: number) => void;\n  setEndTs?: (n: number) => void;\n  periodCount?: number;\n  setPeriodCount?: (p: number) => void;\n  expiryTs: number | null;\n  setExpiryTs: (ts: number) => void;\n  onCancel: () => void;\n  onClick: () => void;\n  isSendEnabled: boolean;\n};\n\nfunction DropVendorForm(props: DropVendorFormProps) {\n  const {\n    network,\n    mint,\n    setDepositor,\n    setMint,\n    setRewardDisplayAmount,\n    setStartTs,\n    setEndTs,\n    periodCount,\n    setPeriodCount,\n    expiryTs,\n    setExpiryTs,\n    onCancel,\n    onClick,\n    isSendEnabled,\n  } = props;\n  const mintOptions: { label: string; publicKey: PublicKey }[] = Object.keys(\n    network.mints,\n  ).map(label => {\n    return {\n      label,\n      publicKey: network.mints[label],\n    };\n  });\n\n  return (\n    <>\n      <div>\n        <div style={{ display: 'flex', marginTop: '10px' }}>\n          <div style={{ flex: 1 }}>\n            <OwnedTokenAccountsSelect\n              style={{ height: '100%' }}\n              mint={mint === null ? undefined : network.mints[mint]}\n              onChange={(f: PublicKey) => setDepositor(f)}\n            />\n            <FormHelperText>Account to send from</FormHelperText>\n          </div>\n          <div>\n            <FormControl\n              variant=\"outlined\"\n              style={{ width: '200px', marginLeft: '10px', marginTop: '10px' }}\n            >\n              <InputLabel>Mint</InputLabel>\n              <Select\n                value={mint}\n                onChange={e => setMint(e.target.value as string)}\n                label=\"Mint\"\n              >\n                {mintOptions.map(m => (\n                  <MenuItem value={m.label}>{m.label.toUpperCase()}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n          <div>\n            <TextField\n              style={{ marginLeft: '10px', marginTop: '10px' }}\n              id=\"outlined-number\"\n              label=\"Amount\"\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              onChange={e =>\n                setRewardDisplayAmount(parseFloat(e.target.value) as number)\n              }\n              InputProps={{ inputProps: { min: 0 } }}\n            />\n          </div>\n        </div>\n        {setEndTs !== undefined && setStartTs !== undefined && (\n          <>\n            <div style={{ display: 'flex', marginTop: '37px' }}>\n              <div style={{ flex: 1 }}>\n                <TextField\n                  fullWidth\n                  label=\"Start date\"\n                  type=\"datetime-local\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={e => {\n                    const d = new Date(e.target.value);\n                    setStartTs(d.getTime() / 1000);\n                  }}\n                />\n                <FormHelperText>Date vesting begins</FormHelperText>\n              </div>\n            </div>\n            <div style={{ flex: 1, marginTop: '20px' }}>\n              <TextField\n                fullWidth\n                label=\"End date\"\n                type=\"datetime-local\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setEndTs(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>\n                Date the vesting account is fully vested\n              </FormHelperText>\n            </div>\n            <div>\n              <FormControl fullWidth>\n                <TextField\n                  style={{ marginTop: '37px' }}\n                  id=\"outlined-number\"\n                  label=\"Period Count\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                  value={periodCount}\n                  onChange={e =>\n                    setPeriodCount!(parseInt(e.target.value) as number)\n                  }\n                  InputProps={{ inputProps: { min: 1 } }}\n                />\n              </FormControl>\n            </div>\n          </>\n        )}\n        <div style={{ marginTop: '37px', display: 'flex' }}>\n          <div\n            style={{\n              flex: 1,\n              height: '100%',\n              marginRight: '10px',\n            }}\n          >\n            <TextField\n              fullWidth\n              label=\"Expiry date\"\n              type=\"datetime-local\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={e => {\n                const d = new Date(e.target.value);\n                setExpiryTs(d.getTime() / 1000);\n              }}\n            />\n            <FormHelperText>\n              Date after which the account owner dropping rewards can withdraw\n              all unclaimed rewards.\n            </FormHelperText>\n          </div>\n          <div style={{ marginTop: '26px' }}>\n            <TextField\n              style={{ height: '100%' }}\n              disabled\n              placeholder=\"Expiry Unix timestamp\"\n              fullWidth\n              value={expiryTs}\n            />\n          </div>\n        </div>\n      </div>\n      <DialogActions>\n        <Button onClick={onCancel}>Cancel</Button>\n        <Button\n          onClick={onClick}\n          type=\"submit\"\n          color=\"primary\"\n          disabled={!isSendEnabled}\n        >\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport styled from 'styled-components';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Slide from '@material-ui/core/Slide';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { Account, SYSVAR_RENT_PUBKEY, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { getTokenAccount } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\nimport RegistrarSelect from './RegistrarSelect';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport * as bootstrap from './BootstrapProvider';\nimport Me from '../Me';\nimport {\n  memberSigner,\n  memberSeed,\n  createBalanceSandbox,\n} from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\nimport Stake from '../Stake';\nimport Rewards from '../rewards/Rewards';\nimport VestingAccountsSelect from './VestingAccountsSelect';\nimport { toDisplayLabel, fromDisplay } from '../../utils/tokens';\n\nenum TabModel {\n  Me,\n  Stake,\n  Rewards,\n  Lockup,\n}\n\nexport default function MyNode() {\n  const [tab, setTab] = useState(TabModel.Me);\n  return (\n    <div>\n      <MyNodeBanner setTab={setTab} />\n      <Container fixed maxWidth=\"md\" style={{ flex: 1, display: 'flex' }}>\n        {tab === TabModel.Me && <Me />}\n        {tab === TabModel.Stake && <Stake />}\n        {tab === TabModel.Rewards && <Rewards />}\n      </Container>\n    </div>\n  );\n}\n\ntype MyNodeBannerProps = {\n  setTab: (t: TabModel) => void;\n};\n\nfunction MyNodeBanner(props: MyNodeBannerProps) {\n  const [tab, setTab] = useState(TabModel.Me);\n  const { member, registrar, registrarAccount } = useSelector(\n    (state: StoreState) => {\n      return {\n        member: state.registry.member,\n        registrar: state.registry.registrar,\n        registrarAccount: state.accounts[state.registry.registrar.toString()],\n      };\n    },\n  );\n  const [showDepositDialog, setShowDepositDialog] = useState(false);\n  const [showWithdrawDialog, setShowWithdrawDialog] = useState(false);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient } = useWallet();\n  const dispatch = useDispatch();\n\n  const createStakeAccount = async () => {\n    enqueueSnackbar('Creating stake account', {\n      variant: 'info',\n    });\n    const seed = await memberSeed(registrar);\n    const member = await PublicKey.createWithSeed(\n      wallet.publicKey!,\n      seed,\n      registryClient.programId,\n    );\n    const { publicKey, nonce } = await memberSigner(\n      registryClient.programId,\n      registrar,\n      member,\n    );\n    const memberSignerPublicKey = publicKey;\n\n    const [mainTx, balances] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const [lockedTx, balancesLocked] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const tx = registryClient.transaction.createMember(nonce, {\n      accounts: {\n        registrar: registrar,\n        member: member,\n        beneficiary: wallet.publicKey,\n        memberSigner: memberSignerPublicKey,\n        balances,\n        balancesLocked,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n      },\n      instructions: [\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: wallet.publicKey!,\n          newAccountPubkey: member,\n          basePubkey: wallet.publicKey!,\n          seed,\n          lamports: await registryClient.provider.connection.getMinimumBalanceForRentExemption(\n            registryClient.account.member.size,\n          ),\n          space: registryClient.account.member.size,\n          programId: registryClient.programId,\n        }),\n      ],\n    });\n    const signers: Account[] = [];\n    const allTxs = [mainTx, lockedTx, { tx, signers }];\n    // @ts-ignore\n    let txSigs = await registryClient.provider.sendAll(allTxs, {\n      commitment: 'recent',\n      preflightCommitment: 'recent',\n      skipPreflight: true,\n    });\n    console.log('Accounts created with transactions:', txSigs);\n\n    const memberAccount = await registryClient.account.member(member);\n    const memberProgramAccount = {\n      publicKey: member,\n      account: memberAccount,\n    };\n    // Add the new member to the store.\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account: memberProgramAccount,\n      },\n    });\n\n    // Populate the store with all of the member's accounts.\n    await bootstrap.fetchAndDispatchMemberAccounts(\n      memberProgramAccount,\n      dispatch,\n      registryClient.provider.connection,\n    );\n\n    // Subscribe to any updates to the member.\n    bootstrap.subscribeMember(memberProgramAccount, registryClient, dispatch);\n\n    // Tell the UI that our member is ready.\n    dispatch({\n      type: ActionType.RegistrySetMember,\n      item: {\n        member,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake account created ${member.toString()}`, {\n      variant: 'success',\n    });\n  };\n\n  const HoverSpan = styled.span`\n    :hover {\n      cursor: pointer;\n    }\n  `;\n\n  return (\n    <>\n      <div\n        style={{\n          backgroundColor: '#fff',\n          paddingTop: '24px',\n          borderBottom: 'solid 1pt #ccc',\n        }}\n      >\n        <Container\n          fixed\n          maxWidth=\"md\"\n          style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Typography variant=\"h4\" style={{ marginBottom: '10px' }}>\n                My Stake\n              </Typography>\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <RegistrarSelect />\n            </div>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div>\n              <Typography>\n                {member !== undefined ? (\n                  member.toString()\n                ) : (\n                  <>\n                    Account not found. Please{' '}\n                    <HoverSpan\n                      onClick={() => {\n                        createStakeAccount().catch(err => {\n                          console.error(err);\n                          enqueueSnackbar(\n                            `Error creating stake account: ${err.toString()}`,\n                            {\n                              variant: 'error',\n                            },\n                          );\n                        });\n                      }}\n                      style={{\n                        color: 'black',\n                        fontWeight: 'bold',\n                        textDecoration: 'underline',\n                      }}\n                    >\n                      create\n                    </HoverSpan>{' '}\n                    a stake account.\n                  </>\n                )}\n              </Typography>\n            </div>\n            <div>\n              <div>\n                <Button\n                  disabled={member === undefined}\n                  onClick={() => setShowDepositDialog(true)}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  style={{ marginRight: '10px' }}\n                >\n                  <ArrowDownwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Deposit\n                  </Typography>\n                </Button>\n                <Button\n                  disabled={member === undefined}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => setShowWithdrawDialog(true)}\n                >\n                  <ArrowUpwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Withdraw\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Container>\n        <div\n          style={{\n            maxWidth: '960px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            paddingLeft: '24px',\n            paddingRight: '24px',\n            marginTop: '10px',\n          }}\n        >\n          <Tabs\n            value={tab}\n            onChange={(_e, t) => {\n              setTab(t);\n              props.setTab(t);\n            }}\n          >\n            <Tab value={TabModel.Me} label=\"Me\" />\n            <Tab value={TabModel.Stake} label=\"Stake\" />\n            <Tab value={TabModel.Rewards} label=\"Rewards\" />\n          </Tabs>\n        </div>\n      </div>\n      {member !== undefined && (\n        <>\n          <DepositDialog\n            open={showDepositDialog}\n            onClose={() => setShowDepositDialog(false)}\n          />\n          <WithdrawDialog\n            open={showWithdrawDialog}\n            onClose={() => setShowWithdrawDialog(false)}\n          />\n        </>\n      )}\n    </>\n  );\n}\n\ntype DepositDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DepositDialog(props: DepositDialogProps) {\n  const { open, onClose } = props;\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { registryClient, lockupClient } = useWallet();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    const registrar: ProgramAccount = {\n      publicKey: state.registry.registrar,\n      account: registrarAccount,\n    };\n    return {\n      registrar,\n      memberAccount,\n      member: state.registry.member,\n      mintAccount: state.accounts[registrar.account.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      deposit={true}\n      title={'Deposit'}\n      contextText={'Select the amount to deposit'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Depositing ${displayAmount} ${toDisplayLabel(\n            registrar.account.mint,\n          )} from ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'deposit_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(\n                registryClient.programId,\n                registrar.publicKey,\n                member!,\n              )\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              {\n                pubkey: registrar.publicKey,\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistWithdraw(\n              relayData,\n              amount,\n              {\n                accounts: {\n                  transfer: {\n                    // @ts-ignore\n                    lockup: await lockupClient.state.address(),\n                    beneficiary: registryClient.provider.wallet.publicKey,\n                    whitelistedProgram: registryClient.programId,\n                    vesting: from,\n                    vault: vesting.vault,\n                    vestingSigner: _vestingSigner,\n                    tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                    whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                    whitelistedProgramVaultAuthority: _memberSigner,\n                  },\n                },\n                remainingAccounts: relayAccounts,\n              },\n            );\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.deposit(amount, {\n              accounts: {\n                depositor: from,\n                depositorAuthority: registryClient.provider.wallet.publicKey,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                vault: memberAccount.balances.vault,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                member: member,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n        closeSnackbar();\n        enqueueSnackbar(`Deposit complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype WithdrawDialogProps = DepositDialogProps;\n\nfunction WithdrawDialog(props: WithdrawDialogProps) {\n  const { open, onClose } = props;\n  const { registryClient, lockupClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    registrarAccount,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar: state.registry.registrar,\n      registrarAccount,\n      member: state.registry.member,\n      memberAccount,\n      mintAccount: state.accounts[registrarAccount.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      title={'Withdraw'}\n      contextText={'Select the amount to withdraw'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Withdrawing ${displayAmount} ${toDisplayLabel(\n            registrarAccount.mint,\n          )} to ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          const _memberSigner = await memberSigner(\n            registryClient.programId,\n            registrar,\n            member!,\n          );\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'withdraw_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(registryClient.programId, registrar, member!)\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: registrar, isWritable: false, isSigner: false },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistDeposit(relayData, {\n              accounts: {\n                transfer: {\n                  // @ts-ignore\n                  lockup: await lockupClient.state.address(),\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  whitelistedProgram: registryClient.programId,\n                  vesting: from,\n                  vault: vesting.vault,\n                  vestingSigner: _vestingSigner,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                  whitelistedProgramVaultAuthority: _memberSigner,\n                },\n              },\n              remainingAccounts: relayAccounts,\n            });\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.withdraw(amount, {\n              accounts: {\n                registrar,\n                member,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                vault: memberAccount.balances.vault,\n                memberSigner: _memberSigner.publicKey,\n                depositor: from,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n\n        closeSnackbar();\n        enqueueSnackbar(`Withdraw complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype TransferDialogProps = {\n  title: string;\n  contextText: string;\n  open: boolean;\n  deposit?: boolean;\n  onClose: () => void;\n  onTransfer: (\n    from: PublicKey,\n    amount: number,\n    isLocked: boolean,\n  ) => Promise<void>;\n};\n\nfunction TransferDialog(props: TransferDialogProps) {\n  const { mint, mintAccount } = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const mint = registrar ? registrar.mint : undefined;\n    return {\n      mint,\n      mintAccount: state.accounts[registrar.mint.toString()],\n    };\n  });\n  const { enqueueSnackbar } = useSnackbar();\n  const { open, onClose, onTransfer, title, contextText, deposit } = props;\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const [from, setFrom] = useState<null | PublicKey>(null);\n  const [vesting, setVesting] = useState<null | PublicKey>(null);\n  const [maxDisplayAmount, setMaxDisplayAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const submitBtnDisabled =\n    (isLocked ? !vesting : !from) ||\n    !displayAmount ||\n    !maxDisplayAmount ||\n    displayAmount > maxDisplayAmount;\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={onClose}\n        fullWidth\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <DialogTitle>{title}</DialogTitle>\n          <div style={{ display: 'flex', paddingRight: '24px' }}>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <LockIcon />\n            </div>\n            <FormControlLabel\n              style={{ marginLeft: '0px', marginRight: '0px' }}\n              control={\n                <Switch\n                  checked={isLocked}\n                  onChange={() => setIsLocked(!isLocked)}\n                />\n              }\n              label=\"\"\n            />\n          </div>\n        </div>\n        <DialogContent>\n          <div style={{ display: 'flex' }}>\n            <div style={{ flex: 1 }}>\n              <TextField\n                style={{ width: '100%' }}\n                id=\"outlined-number\"\n                label=\"Amount\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                onChange={e =>\n                  setDisplayAmount(parseFloat(e.target.value) as number)\n                }\n                InputProps={{\n                  inputProps: { min: 0, max: maxDisplayAmount ?? 0 },\n                }}\n              />\n              <FormHelperText>{contextText}</FormHelperText>\n            </div>\n          </div>\n          <FormControl fullWidth>\n            {!isLocked ? (\n              <>\n                <OwnedTokenAccountsSelect\n                  variant=\"outlined\"\n                  decimals={mintAccount.decimals}\n                  mint={mint}\n                  onChange={(f: PublicKey, _maxDisplayAmount: BN) => {\n                    setFrom(f);\n                    // TODO: set an actual limit for the withdrawal UI (i.e.\n                    //       what's currently in the vault). Currently not\n                    //       done since we dont' have websocket connections\n                    //       for each of the users accounts. However we\n                    //       still use the \"max\" amount for display vesting\n                    //       accounts.\n                    setMaxDisplayAmount(2 ** 53);\n                  }}\n                />\n                <FormHelperText>\n                  Token account to transfer to/from\n                </FormHelperText>\n              </>\n            ) : (\n              <>\n                <VestingAccountsSelect\n                  variant=\"outlined\"\n                  mint={mint}\n                  decimals={mintAccount.decimals}\n                  deposit={deposit}\n                  onChange={(v: PublicKey, maxDisplayAmount: BN) => {\n                    setVesting(v);\n                    setMaxDisplayAmount(maxDisplayAmount.toNumber());\n                  }}\n                />\n                <FormHelperText>\n                  Vesting account to transfer to/from your <b>locked</b>{' '}\n                  balances\n                </FormHelperText>\n              </>\n            )}\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            //@ts-ignore\n            onClick={() => {\n              onTransfer(\n                isLocked ? vesting! : from!,\n                displayAmount!,\n                isLocked,\n              ).catch(err => {\n                console.error(err);\n                enqueueSnackbar(`Error transferring funds: ${err.toString()}`, {\n                  variant: 'error',\n                });\n              });\n            }}\n            color=\"primary\"\n            disabled={submitBtnDisabled}\n          >\n            {title}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport * as notification from '../common/Notification';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport { RewardListItemViewModel } from './RewardsList';\nimport { ActionType } from '../../store/actions';\nimport { State as StoreState } from '../../store/reducer';\nimport { vendorSigner } from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\n\ntype ClaimRewardButtonProps = {\n  rli: RewardListItemViewModel;\n};\n\nexport default function ClaimRewardButton(props: ClaimRewardButtonProps) {\n  const { registryClient, lockupClient } = useWallet();\n  const { member, registrar } = useSelector((state: StoreState) => {\n    const registrar = {\n      publicKey: state.registry.registrar,\n      account: state.accounts[state.registry.registrar.toString()],\n    };\n    const member = state.registry.member\n      ? {\n          publicKey: state.registry.member,\n          account: state.accounts[state.registry.member.toString()],\n        }\n      : undefined;\n    return {\n      registrar,\n      member,\n    };\n  });\n  const { rli } = props;\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const [token, setToken] = useState<null | PublicKey>(null);\n\n  // On click.\n  const clickHandler = async (): Promise<void> => {\n    notification.withTx(\n      snack,\n      `Processing vendor reward ${rli!.vendor!.publicKey.toString()}`,\n      'Reward processed',\n      async () => {\n        const vendor = await registryClient.account.rewardVendor(\n          rli.vendor!.publicKey,\n        );\n        const _vendorSigner = await vendorSigner(\n          registryClient.programId,\n          registrar.publicKey,\n          rli.vendor!.publicKey,\n        );\n        if (rli!.reward.locked) {\n          const vendoredVesting = new Account();\n          const vendoredVestingVault = new Account();\n          const vendoredVestingSigner = await vestingSigner(\n            lockupClient.programId,\n            vendoredVesting.publicKey,\n          );\n          const remainingAccounts = lockupClient.instruction.createVesting\n            .accounts({\n              vesting: vendoredVesting.publicKey,\n              vault: vendoredVestingVault.publicKey,\n              depositor: vendor.vault,\n              depositorAuthority: _vendorSigner.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              rent: SYSVAR_RENT_PUBKEY,\n              clock: SYSVAR_CLOCK_PUBKEY,\n            })\n            // Change the signer status on the vendor signer since it's signed by the program, not the\n            // client.\n            .map((meta: any) =>\n              meta.pubkey.equals(_vendorSigner.publicKey)\n                ? { ...meta, isSigner: false }\n                : meta,\n            );\n          const tx = await registryClient.rpc.claimRewardLocked(\n            vendoredVestingSigner.nonce,\n            {\n              accounts: {\n                // @ts-ignore\n                registry: await registryClient.state.address(),\n                lockupProgram: lockupClient.programId,\n                cmn: {\n                  registrar: registrar.publicKey,\n                  member: member!.publicKey,\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  balances: member!.account.balances,\n                  balancesLocked: member!.account.balancesLocked,\n                  vendor: rli.vendor!.publicKey,\n                  vault: rli.vendor!.account.vault,\n                  vendorSigner: _vendorSigner.publicKey,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  clock: SYSVAR_CLOCK_PUBKEY,\n                },\n              },\n              remainingAccounts,\n              signers: [vendoredVesting, vendoredVestingVault],\n              instructions: [\n                await lockupClient.account.vesting.createInstruction(\n                  vendoredVesting,\n                ),\n                ...(await createTokenAccountInstrs(\n                  registryClient.provider,\n                  vendoredVestingVault.publicKey,\n                  rli.vendor!.account.mint,\n                  vendoredVestingSigner.publicKey,\n                )),\n              ],\n            },\n          );\n          // Refetch the vesting accounts to update the UI with the new reward.\n          const vestingAccounts = await lockupClient.account.vesting.all(\n            registryClient.provider.wallet.publicKey.toBuffer(),\n          );\n          vestingAccounts.forEach(account => {\n            dispatch({\n              type: ActionType.AccountAdd,\n              item: {\n                account,\n              },\n            });\n          });\n          dispatch({\n            type: ActionType.LockupSetVestings,\n            item: {\n              vestingAccounts: vestingAccounts.map(v => v.publicKey),\n            },\n          });\n          return tx;\n        } else {\n          return await registryClient.rpc.claimReward({\n            accounts: {\n              to: token,\n              cmn: {\n                registrar: registrar.publicKey,\n                member: member!.publicKey,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                balances: member!.account.balances,\n                balancesLocked: member!.account.balancesLocked,\n\n                vendor: rli.vendor!.publicKey,\n                vault: vendor.vault,\n                vendorSigner: _vendorSigner.publicKey,\n\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                clock: SYSVAR_CLOCK_PUBKEY,\n              },\n            },\n          });\n        }\n      },\n    );\n  };\n\n  return (\n    <>\n      {!rli.reward.locked && (\n        <div>\n          <OwnedTokenAccountsSelect\n            style={{ width: '400px', height: '100%' }}\n            mint={rli.vendor.account.mint}\n            onChange={(f: PublicKey) => setToken(f)}\n          />\n        </div>\n      )}\n      <div style={{ marginLeft: '10px', marginRight: '10px' }}>\n        <Button\n          disabled={rli.reward.unlockedAlloc && token === null}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() =>\n            clickHandler().catch(err => {\n              console.error(err);\n              snack.enqueueSnackbar(\n                `Error ending pending redemption: ${err.toString()}`,\n                {\n                  variant: 'error',\n                },\n              );\n            })\n          }\n        >\n          Process Reward\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport RewardsList, { RewardListItemViewModel } from './RewardsList';\nimport DropRewardButton from './DropRewardButton';\nimport ClaimRewardButton from './ClaimRewardButton';\nimport { rewardEvents } from '../../utils/registry';\n\nexport default function Rewards() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const ctx = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const rewardEventQueue = {\n      publicKey: registrar.rewardEventQ,\n      account: state.accounts[registrar.rewardEventQ.toString()],\n    };\n    return {\n      accounts: state.accounts,\n      rewardEventQueue,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      network: state.common.network,\n    };\n  });\n  const { rewardEventQueue } = ctx;\n\n  const events = useMemo(() => rewardEvents(rewardEventQueue.account), [\n    rewardEventQueue.account,\n  ]);\n\n  useEffect(() => {\n    (async () => {\n      // TODO: need to chop up the calls here, for reward vendors > 100 entires.\n      const accounts = await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        events.map(m => m.vendor),\n      );\n      accounts.forEach(a => {\n        if (a === null) {\n          snack.enqueueSnackbar(`RPC node returned invalid vendor account`, {\n            variant: 'error',\n          });\n          return;\n        }\n        const account = registryClient.coder.accounts.decode(\n          'RewardVendor',\n          a.account.data,\n        );\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: { publicKey: a.publicKey, account },\n          },\n        });\n      });\n    })();\n  }, [\n    events,\n    dispatch,\n    snack,\n    registryClient.coder.accounts,\n    registryClient.provider.connection,\n  ]);\n\n  // All rewards to display.\n  const rewards = events\n    .map((m: any) => RewardListItemViewModel.fromMessage(ctx, m))\n    .reverse();\n\n  // Next reward to claim.\n  let nextReward = null;\n  if (rewards.filter(r => r === null).length === 0) {\n    nextReward = rewards\n      .filter(r => r!.needsClaim)\n      .sort((a, b) =>\n        a!.cursor < b!.cursor ? -1 : a!.cursor > b!.cursor ? 1 : 0,\n      )\n      .shift();\n  }\n\n  return (\n    <div style={{ width: '100%', marginTop: '24px' }}>\n      {nextReward && (\n        <Card style={{ marginBottom: '24px' }}>\n          <CardContent>\n            <Typography variant=\"h6\">\n              You were staked during a previous reward. To prove eligibility,\n              click the \"Process\" button until you've processed <b>all</b>{' '}\n              eligible rewards. For unlocked rewards, don't forget to select the\n              address you wish to send your stake reward to.\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n      <div\n        style={{\n          marginBottom: '10px',\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Typography style={{ fontWeight: 'bold', fontSize: '20px' }}>\n          Reward History\n        </Typography>\n        <div style={{ display: 'flex' }}>\n          {nextReward && <ClaimRewardButton rli={nextReward} />}\n          {localStorage.getItem('private') && <DropRewardButton />}\n        </div>\n      </div>\n      <div style={{ marginBottom: '16px' }}>\n        <Typography>\n          When rewards are dropped, one must prove one was staked during the\n          time of drop. This means sending a transaction to the staking program\n          to <b>process</b> the reward. For <b>unlocked</b> rewards, select the\n          token address to transfer the reward to. For <b>locked</b> rewards, a\n          locked vesting account will be created and realized to the staker upon\n          unstaking. See the Lockup tab.\n        </Typography>\n      </div>\n      <Paper>\n        <RewardsList rewards={rewards} />\n      </Paper>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { PublicKey } from '@solana/web3.js';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { toDisplay } from '../../utils/tokens';\n\ntype Props = {\n  style?: any;\n  mint?: PublicKey | null;\n  decimals: number;\n  variant?: 'outlined' | 'standard';\n  onChange: (from: PublicKey, maxAmount: BN) => void;\n  deposit?: boolean;\n};\n\nexport default function VestingAccountsSelect(p: Props) {\n  const { mint, decimals, variant, onChange, style, deposit } = p;\n  const vestings: ProgramAccount[] = useSelector((state: StoreState) => {\n    if (!mint) {\n      return [];\n    }\n    return state.lockup.vestings\n      .map(v => {\n        return { publicKey: v, account: state.accounts[v.toString()] };\n      })\n      .filter(v => v.account.mint.equals(mint));\n  });\n  const [fromAccount, setFromAccount] = useState('');\n  return (\n    <Select\n      style={style}\n      variant={variant}\n      fullWidth\n      value={fromAccount}\n      onChange={e => {\n        const pk = e.target.value as string;\n        setFromAccount(pk);\n        const pubkey = new PublicKey(pk);\n        const v = vestings.filter(v => v.publicKey.equals(pubkey)).pop();\n        onChange(pubkey, availableAmount(v!, deposit));\n      }}\n    >\n      {vestings.length === 0 ? (\n        <MenuItem value={''}>No vesting accounts found</MenuItem>\n      ) : (\n        vestings.map(v => {\n          return (\n            <MenuItem value={v.publicKey.toString()}>\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <div>{`${v.publicKey.toString()}`}</div>\n                <div style={{ float: 'right', color: '#ccc' }}>{`${toDisplay(\n                  availableAmount(v, deposit),\n                  decimals,\n                )}`}</div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction availableAmount(v: ProgramAccount, deposit?: boolean): BN {\n  return deposit\n    ? v.account.outstanding.sub(v.account.whitelistOwned)\n    : v.account.whitelistOwned;\n}\n","import React from 'react';\nimport MyNode from '../components/common/MyNode';\n\nexport default function MyNodePage() {\n  return <MyNode />;\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { fromDisplay } from '../../utils/tokens';\nimport { vestingSigner } from '../../utils/lockup';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\n\nexport default function NewVestingButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <div onClick={() => setOpen(true)}>\n        <Button variant=\"contained\" color=\"secondary\">\n          New\n        </Button>\n      </div>\n      <NewVestingDialog open={open} onClose={() => setOpen(false)} />\n    </>\n  );\n}\n\ntype NewVestingDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction NewVestingDialog(props: NewVestingDialogProps) {\n  const { open, onClose } = props;\n  const { network, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      accounts: state.accounts,\n    };\n  });\n\n  const defaultStartDate = new Date().toString();\n  const defaultStartTs = new Date(defaultStartDate).getTime() / 1000;\n  const defaultEndDate = '2027-01-01T12:00';\n  const defaultEndTs = new Date(defaultEndDate).getTime() / 1000;\n\n  const [beneficiary, setBeneficiary] = useState('');\n  const isValidBeneficiary = (() => {\n    try {\n      new PublicKey(beneficiary);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  })();\n  const displayBeneficiaryError = !isValidBeneficiary && beneficiary !== '';\n\n  const [fromAccount, setFromAccount] = useState<null | PublicKey>(null);\n  const [startTimestamp, setStartTimestamp] = useState(defaultStartTs);\n  const [timestamp, setTimestamp] = useState(defaultEndTs);\n  const [periodCount, setPeriodCount] = useState(7);\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const { lockupClient } = useWallet();\n  const [isLoading, setIsLoading] = useState(false);\n  const [mint, setMint] = useState<null | PublicKey>(null);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const submitBtnEnabled =\n    mint !== null &&\n    fromAccount !== null &&\n    isValidBeneficiary &&\n    displayAmount !== null;\n\n  const createVestingClickHandler = async () => {\n    setIsLoading(true);\n    try {\n      const beneficiaryPublicKey = new PublicKey(beneficiary);\n      const beneficiaryAccount = await lockupClient.provider.connection.getAccountInfo(\n        beneficiaryPublicKey,\n      );\n      if (beneficiaryAccount === null) {\n        enqueueSnackbar('Unable to validate given beneficiary.', {\n          variant: 'error',\n        });\n        setIsLoading(false);\n        return;\n      }\n      if (!beneficiaryAccount.owner.equals(SystemProgram.programId)) {\n        enqueueSnackbar(\n          'The beneficiary must be owned by the System Program.',\n          {\n            variant: 'error',\n          },\n        );\n        setIsLoading(false);\n        return;\n      }\n\n      enqueueSnackbar('Creating vesting acount...', {\n        variant: 'info',\n      });\n\n      const mintAccount = accounts[mint!.toString()];\n      let amount = mintAccount\n        ? fromDisplay(displayAmount!, mintAccount.decimals)\n        : new BN(displayAmount!);\n\n      const vesting = new Account();\n      const vestingVault = new Account();\n      const _vestingSigner = await vestingSigner(\n        lockupClient.programId,\n        vesting.publicKey,\n      );\n\n      let tx = await lockupClient.rpc.createVesting(\n        beneficiaryPublicKey,\n        amount,\n        _vestingSigner.nonce,\n        new BN(startTimestamp),\n        new BN(timestamp),\n        new BN(periodCount),\n        null,\n        {\n          accounts: {\n            vesting: vesting.publicKey,\n            vault: vestingVault.publicKey,\n            depositor: fromAccount,\n            depositorAuthority: lockupClient.provider.wallet.publicKey,\n            tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n            rent: SYSVAR_RENT_PUBKEY,\n            clock: SYSVAR_CLOCK_PUBKEY,\n          },\n          signers: [vesting, vestingVault],\n          instructions: [\n            await lockupClient.account.vesting.createInstruction(vesting),\n            ...(await createTokenAccountInstrs(\n              lockupClient.provider,\n              vestingVault.publicKey,\n              mint!,\n              _vestingSigner.publicKey,\n            )),\n          ],\n        },\n      );\n      // Only add to the local store if the lockup belongs to the current user.\n      if (beneficiaryPublicKey.equals(lockupClient.provider.wallet.publicKey)) {\n        const vestingAccount = await lockupClient.account.vesting(\n          vesting.publicKey,\n        );\n        dispatch({\n          type: ActionType.LockupCreateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: vestingAccount,\n            },\n          },\n        });\n      }\n      enqueueSnackbar(`Vesting account created`, {\n        variant: 'success',\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      onClose();\n    } catch (err) {\n      enqueueSnackbar(`Error creating vesting account: ${err.toString()}`, {\n        variant: 'error',\n      });\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Vesting Account\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <div>\n          {isLoading && (\n            <div\n              style={{\n                width: '40px',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                marginBottom: '24px',\n              }}\n            >\n              <CircularProgress\n                style={{ marginLeft: 'auto', marginRight: 'auto' }}\n              />\n            </div>\n          )}\n          <div style={{ display: 'flex', width: '100%' }}>\n            <div>\n              <FormControl variant=\"outlined\" style={{ width: '200px' }}>\n                <InputLabel>Mint</InputLabel>\n                <Select\n                  value={mint ? mint!.toString() : ''}\n                  onChange={e =>\n                    setMint(new PublicKey(e.target.value as string))\n                  }\n                >\n                  {Object.keys(network.mints).map(m => (\n                    <MenuItem value={network.mints[m].toString()}>\n                      {m.toUpperCase()}\n                    </MenuItem>\n                  ))}\n                  {/*<MenuItem value=\"custom\">Custom</MenuItem>*/}\n                </Select>\n              </FormControl>\n            </div>\n            {false && (\n              <div style={{ flex: 1, marginLeft: '10px' }}>\n                <TextField\n                  fullWidth\n                  label=\"Custom mint\"\n                  value={mint ? mint!.toString() : ''}\n                  onChange={e => setMint(new PublicKey(e.target.value))}\n                />\n                <FormHelperText>Mint of the token to lockup</FormHelperText>\n              </div>\n            )}\n          </div>\n          <div>\n            <div style={{ display: 'flex', width: '100%' }}>\n              <div style={{ flex: 1 }}>\n                <FormControl fullWidth>\n                  <InputLabel>From</InputLabel>\n                  <OwnedTokenAccountsSelect\n                    mint={mint}\n                    onChange={(f: PublicKey) => setFromAccount(f)}\n                  />\n                  <FormHelperText>Token account to send from</FormHelperText>\n                </FormControl>\n              </div>\n            </div>\n          </div>\n          <div style={{ marginTop: '24px' }}>\n            <TextField\n              fullWidth\n              error={displayBeneficiaryError}\n              helperText={displayBeneficiaryError && 'Invalid beneficiary'}\n              label=\"Beneficiary\"\n              value={beneficiary}\n              onChange={e => setBeneficiary(e.target.value)}\n            />\n            <FormHelperText>Owner of the new vesting account</FormHelperText>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n            }}\n          >\n            {false && (\n              <FormHelperText style={{ color: 'blue' }}>\n                Note: Amounts for custom mints (i.e., not SRM/MSRM) are in their\n                raw, non-decimal form. Make sure to convert before entering into\n                the fields here. For example, if a token has 6 decimals, then\n                multiply your desired amount by 10^6.\n              </FormHelperText>\n            )}\n            <TextField\n              fullWidth\n              label=\"Amount\"\n              type=\"number\"\n              value={displayAmount}\n              InputProps={{ inputProps: { min: 0 } }}\n              onChange={e => setDisplayAmount(parseFloat(e.target.value))}\n            />\n            <FormHelperText>\n              Amount to deposit into the vesting account\n            </FormHelperText>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: 1, marginRight: '10px' }}>\n              <TextField\n                fullWidth\n                label=\"Start date\"\n                type=\"datetime-local\"\n                defaultValue={defaultStartDate}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setStartTimestamp(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>Date when vesting begins</FormHelperText>\n            </div>\n            <div>\n              <TextField\n                disabled\n                fullWidth\n                label=\"Unix Timestamp\"\n                value={startTimestamp}\n              />\n            </div>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: 1, marginRight: '10px' }}>\n              <TextField\n                fullWidth\n                label=\"End date\"\n                type=\"datetime-local\"\n                defaultValue={defaultEndDate}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setTimestamp(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>Date when all tokens are vested</FormHelperText>\n            </div>\n            <div>\n              <TextField\n                disabled\n                fullWidth\n                label=\"Unix Timestamp\"\n                value={timestamp}\n              />\n            </div>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n            }}\n          >\n            <FormControl fullWidth>\n              <TextField\n                id=\"outlined-number\"\n                label=\"Period Count\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                value={periodCount}\n                onChange={e =>\n                  setPeriodCount(parseInt(e.target.value) as number)\n                }\n                InputProps={{ inputProps: { min: 1 } }}\n              />\n              <FormHelperText>Number of vesting periods</FormHelperText>\n            </FormControl>\n          </div>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          disabled={!submitBtnEnabled || isLoading}\n          onClick={() => createVestingClickHandler()}\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport ChartistGraph from 'react-chartist';\nimport { useDispatch, useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport { FixedScaleAxis, IChartOptions, Interpolation } from 'chartist';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '@material-ui/core/Card';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Collapse from '@material-ui/core/Collapse';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { ProgramAccount, State as StoreState } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { useWallet } from '../common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { withTx } from '../../components/common/Notification';\nimport { ActionType } from '../../store/actions';\nimport { getImage } from '../../components/common/RegistrarSelect';\nimport { useTokenInfos, toDisplay, toDisplayLabel } from '../../utils/tokens';\nimport {\n  vestingSigner,\n  availableForWithdrawal as _availableForWithdrawal,\n} from '../../utils/lockup';\n\ntype VestingAccountCardProps = {\n  network: Network;\n  vesting: ProgramAccount;\n};\n\nexport default function VestingAccountCard(props: VestingAccountCardProps) {\n  const { vesting, network } = props;\n  const { lockupClient, registryClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const tokenInfos = useTokenInfos();\n  const dispatch = useDispatch();\n  const { accounts, member, mintAccount } = useSelector((state: StoreState) => {\n    return {\n      accounts: state.accounts,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      mintAccount: state.accounts[vesting.account.mint.toString()],\n    };\n  });\n  const [expanded, setExpanded] = useState(false);\n  const [hover, setHover] = useState(false);\n\n  // Whitelisted mints only for now.\n  const isCustomMint = false;\n\n  let mint = accounts[vesting.account.mint.toString()];\n  const displayFn = mint\n    ? (input: BN) => {\n        return toDisplay(input, mint.decimals);\n      }\n    : (input: BN) => input.toString();\n\n  const outstandingLabel = `${displayFn(\n    vesting.account.outstanding,\n  )} ${toDisplayLabel(vesting.account.mint)}`;\n  const startTs = vesting.account.startTs;\n  const endTs = vesting.account.endTs;\n\n  const tsOverflow = endTs.sub(startTs).mod(vesting.account.periodCount);\n  const shiftedStartTs = startTs.sub(tsOverflow);\n\n  const period = endTs.sub(shiftedStartTs).div(vesting.account.periodCount);\n\n  // Make the horizontal axis evenly spaced.\n  //\n  // Vesting dates assuming we stretch the start date back in time (so that the\n  // periods are of even length).\n  const vestingDates = [\n    ...Array(vesting.account.periodCount.toNumber() + 1),\n  ].map((_, idx) => {\n    return formatDate(\n      new Date((shiftedStartTs.toNumber() + idx * period.toNumber()) * 1000),\n    );\n  });\n  // Now push the start window forward to the real start date, making the first period shorter.\n  vestingDates[0] = formatDate(new Date(startTs.toNumber() * 1000));\n\n  // Now do the same thing on the vertical axis.\n  const rewardOverflow = vesting.account.startBalance.mod(\n    vesting.account.periodCount,\n  );\n  const rewardPerPeriod = vesting.account.startBalance\n    .sub(rewardOverflow)\n    .div(vesting.account.periodCount)\n    .toNumber();\n  const cumulativeVesting = [...Array(vestingDates.length)].map(() => 0);\n  cumulativeVesting[1] = rewardPerPeriod + rewardOverflow.toNumber();\n  for (let k = 2; k < cumulativeVesting.length; k += 1) {\n    cumulativeVesting[k] = cumulativeVesting[k - 1] + rewardPerPeriod;\n  }\n\n  const startLabel = formatDate(\n    new Date(vesting.account.startTs.toNumber() * 1000),\n  );\n  const endLabel = formatDate(\n    new Date(vesting.account.endTs.toNumber() * 1000),\n  );\n  const urlSuffix = `?cluster=${network.explorerClusterSuffix}`;\n\n  const [\n    availableForWithdrawal,\n    setAvailableForWithdrawal,\n  ] = useState<null | BN>(null);\n  const [withdrawalAccount, setWithdrawalAccount] = useState<null | PublicKey>(\n    null,\n  );\n\n  useEffect(() => {\n    _availableForWithdrawal(lockupClient, vesting.publicKey)\n      .then((amount: BN) => {\n        setAvailableForWithdrawal(amount);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        enqueueSnackbar(\n          `Error fetching available for withdrawal: ${err.toString()}`,\n          {\n            variant: 'error',\n          },\n        );\n      });\n  }, [lockupClient, vesting, enqueueSnackbar]);\n  const snack = useSnackbar();\n\n  const withdrawEnabled =\n    withdrawalAccount !== null &&\n    availableForWithdrawal !== null &&\n    availableForWithdrawal.gtn(0);\n  const withdraw = async () => {\n    await withTx(\n      snack,\n      'Withdrawing locked tokens',\n      'Tokens unlocked',\n      async () => {\n        const remainingAccounts = (() => {\n          if (vesting.account.realizor) {\n            if (!member) {\n              // Should never be thrown.\n              throw new Error('Member account not found');\n            }\n            return [\n              {\n                pubkey: registryClient.programId,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: member.publicKey, isSigner: false, isWritable: false },\n              {\n                pubkey: member.account.balances.spt,\n                isSigner: false,\n                isWritable: false,\n              },\n              {\n                pubkey: member.account.balancesLocked.spt,\n                isSigner: false,\n                isWritable: false,\n              },\n            ];\n          } else {\n            return undefined;\n          }\n        })();\n        const tx = await lockupClient.rpc.withdraw(availableForWithdrawal!, {\n          accounts: {\n            vesting: vesting.publicKey,\n            beneficiary: lockupClient.provider.wallet.publicKey,\n            token: withdrawalAccount!,\n            vault: vesting.account.vault,\n            vestingSigner: (\n              await vestingSigner(lockupClient.programId, vesting.publicKey)\n            ).publicKey,\n            tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n            clock: SYSVAR_CLOCK_PUBKEY,\n          },\n          remainingAccounts,\n        });\n        const newVesting = await lockupClient.account.vesting(\n          vesting.publicKey,\n        );\n        dispatch({\n          type: ActionType.LockupUpdateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: newVesting,\n            },\n          },\n        });\n        return tx;\n      },\n    );\n  };\n  const rows = [\n    {\n      field: 'Projected unlock',\n      value:\n        availableForWithdrawal === null\n          ? null\n          : displayFn(availableForWithdrawal!),\n    },\n    {\n      field: 'Locked outstanding',\n      value: displayFn(vesting.account.outstanding),\n    },\n    {\n      field: 'Current balance',\n      value: displayFn(\n        vesting.account.outstanding.sub(vesting.account.whitelistOwned),\n      ),\n    },\n    { field: 'Initial lockup', value: displayFn(vesting.account.startBalance) },\n    {\n      field: 'Amount unlocked',\n      value: displayFn(\n        vesting.account.startBalance.sub(vesting.account.outstanding),\n      ),\n    },\n    {\n      field: 'Whitelist owned',\n      value: displayFn(vesting.account.whitelistOwned),\n    },\n    { field: 'Period count', value: vesting.account.periodCount.toString() },\n    {\n      field: 'Start timestamp',\n      value: `${new Date(\n        vesting.account.startTs.toNumber() * 1000,\n      ).toLocaleString()} (${vesting.account.startTs.toString()})`,\n    },\n    {\n      field: 'End timestamp',\n      value: `${new Date(\n        vesting.account.endTs.toNumber() * 1000,\n      ).toLocaleString()} (${vesting.account.endTs.toString()})`,\n    },\n    { field: 'Vault', value: vesting.account.vault.toString() },\n    {\n      field: 'Realizer program',\n      value: vesting.account.realizor\n        ? vesting.account.realizor.program.toString()\n        : 'None',\n    },\n    {\n      field: 'Realizer metadata',\n      value: vesting.account.realizor\n        ? vesting.account.realizor.metadata.toString()\n        : 'None',\n    },\n    {\n      field: 'Grantor',\n      value: vesting.account.grantor.toString(),\n    },\n  ];\n\n  return (\n    <Card\n      key={vesting.publicKey.toString()}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() => setHover(false)}\n      style={{\n        marginTop: '24px',\n        cursor: hover ? 'pointer' : 'default',\n      }}\n    >\n      <CardContent style={{ paddingBottom: '16px' }}>\n        <ListItem onClick={() => setExpanded(!expanded)}>\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <ListItemIcon>\n              {getImage(tokenInfos.get(vesting.account.mint.toString()), {\n                marginRight: '16px',\n                width: '56px',\n              })}\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Link\n                  href={\n                    `https://explorer.solana.com/account/${vesting.publicKey.toBase58()}` +\n                    urlSuffix\n                  }\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  {vesting.publicKey.toString()}\n                </Link>\n              }\n              secondary={`${startLabel}, ${endLabel} | ${vesting.account.periodCount.toNumber()} periods`}\n            />\n            <div\n              style={{\n                marginTop: '6px',\n                color: 'rgba(0, 0, 0, 0.54)',\n                display: 'flex',\n                justifyContent: 'space-between',\n                flexDirection: 'column',\n                maxWidth: '200px',\n              }}\n            >\n              <Typography\n                style={{ overflow: 'hidden', whiteSpace: 'nowrap' }}\n                variant=\"body1\"\n              >\n                {outstandingLabel}\n              </Typography>\n            </div>\n          </div>\n        </ListItem>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <Typography></Typography>\n          {vestingDates.length <= 15 ? (\n            <ChartistGraph\n              data={{\n                labels: vestingDates,\n                series: [cumulativeVesting],\n              }}\n              options={\n                {\n                  axisY: {\n                    type: FixedScaleAxis,\n                    low: 0,\n                    high: cumulativeVesting[cumulativeVesting.length - 1],\n                    ticks: cumulativeVesting,\n                  },\n                  lineSmooth: Interpolation.step(),\n                  height: 400,\n                } as IChartOptions\n              }\n              type={'Line'}\n            />\n          ) : (\n            <div style={{ textAlign: 'center', fontWeight: 'bold' }}>\n              {/* TOOD: graphs for vesting accounts with a lot of periods. */}A\n              graph isn't available for this account.\n            </div>\n          )}\n          <div>\n            {isCustomMint && (\n              <div\n                style={{\n                  padding: '15px',\n                }}\n              >\n                <b>\n                  Note: custom mints (i.e. not SRM/MSRM) display raw token\n                  amounts without decimals.\n                </b>\n              </div>\n            )}\n            <Table>\n              <TableBody>\n                {rows.map(r => {\n                  return (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">\n                        {r.value === null ? (\n                          <CircularProgress\n                            style={{\n                              height: '20px',\n                              width: '20px',\n                              padding: 0,\n                            }}\n                          />\n                        ) : (\n                          r.value\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n            <div style={{ display: 'flex', marginTop: '15px' }}>\n              <OwnedTokenAccountsSelect\n                decimals={mintAccount ? mintAccount.decimals : undefined}\n                mint={vesting.account.mint}\n                onChange={(f: PublicKey) => setWithdrawalAccount(f)}\n              />\n              <div style={{ marginLeft: '20px', width: '191px' }}>\n                <Button\n                  style={{ fontSize: '12px' }}\n                  color=\"primary\"\n                  disabled={!withdrawEnabled}\n                  variant=\"contained\"\n                  onClick={() =>\n                    withdraw().catch(err => {\n                      let msg = err.toString();\n                      if (\n                        msg &&\n                        msg.split('custom program error: 0x78').length === 2\n                      ) {\n                        msg = 'Unrealized rewards. Please unstake';\n                      }\n                      enqueueSnackbar(\n                        `Error withdrawing from vesting account: ${err.toString()}`,\n                        {\n                          variant: 'error',\n                        },\n                      );\n                    })\n                  }\n                >\n                  Unlock tokens\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Collapse>\n      </CardContent>\n    </Card>\n  );\n}\n\n// TODO: locale format without minutes, hours, seconds?\nfunction formatDate(d: Date): string {\n  return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport NewVestingButton from './NewVesting';\nimport VestingAccountCard from './VestingAccountCard';\n\nexport default function Vestings() {\n  const { wallet } = useWallet();\n  const { vestingAccounts, network } = useSelector((state: StoreState) => {\n    return {\n      vestingAccounts: state.lockup.vestings.map(v => {\n        return {\n          publicKey: v,\n          account: state.accounts[v.toString()],\n        };\n      }),\n      network: state.common.network,\n    };\n  });\n\n  return (\n    <Container fixed maxWidth=\"md\">\n      <div style={{ width: '100%' }}>\n        <div style={{ marginTop: '24px', marginBottom: '24px' }}>\n          <link\n            rel=\"stylesheet\"\n            href=\"//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\"\n          />\n          <script src=\"//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js\"></script>\n          {wallet.publicKey && (\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: '24px',\n              }}\n            >\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  flexDirection: 'column',\n                }}\n              >\n                <Typography\n                  style={{\n                    fontSize: '20px',\n                    fontWeight: 'bold',\n                  }}\n                >\n                  Projected Unlocks\n                </Typography>\n              </div>\n              <div>\n                <NewVestingButton />\n              </div>\n            </div>\n          )}\n          <Typography color=\"textSecondary\">\n            In addition to a vesting schedule, locked token accounts are subject\n            to an application dependent\n            <b> realization condition</b>, determining if and when locked tokens\n            are given to a user. For example, in the case of locked staking\n            rewards, locked tokens become realized in the event of unstaking. If\n            one never unstakes, one never receives locked token rewards.\n          </Typography>\n          <List\n            disablePadding\n            style={{ marginLeft: 'auto', marginRight: 'auto' }}\n          >\n            {vestingAccounts.map(v => (\n              <VestingAccountCard network={network} vesting={v} />\n            ))}\n            {vestingAccounts.length === 0 && (\n              <Card\n                style={{\n                  marginTop: '24px',\n                }}\n              >\n                <CardContent>\n                  <ListItem>\n                    <div\n                      style={{\n                        width: '100%',\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                      }}\n                    >\n                      <Typography color=\"textSecondary\" variant=\"h6\">\n                        No vesting accounts found\n                      </Typography>\n                    </div>\n                  </ListItem>\n                </CardContent>\n              </Card>\n            )}\n          </List>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","import React from 'react';\nimport Vestings from '../components/lockups/Vestings';\n\nexport default function LockupPage() {\n  return <Vestings />;\n}\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport Multisig from '../components/multisig/Multisig';\nimport { PublicKey } from '@solana/web3.js';\n\nexport default function MultisigPage() {\n  return <Multisig />;\n}\n\nexport function MultisigInstancePage() {\n  const history = useHistory();\n  const location = useLocation();\n  const path = location.pathname.split('/');\n  if (path.length !== 3) {\n    history.push(`/multisig`);\n    return <></>;\n  } else {\n    const multisig = new PublicKey(path[2]);\n    return <Multisig multisig={multisig} />;\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { SnackbarProvider } from 'notistack';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { store } from './store';\nimport WalletProvider from './components/common/WalletProvider';\nimport BootstrapProvider from './components/common/BootstrapProvider';\nimport { TokenRegistryProvider } from './utils/tokens';\nimport Layout from './components/common/Layout';\nimport MyNodePage from './pages/MyNode';\nimport LockupPage from './pages/Lockup';\nimport MultisigPage, { MultisigInstancePage } from './pages/Multisig';\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: 'rgb(255,255,255)',\n      },\n    },\n    typography: {\n      fontFamily: ['Source Sans Pro', 'sans-serif'].join(','),\n    },\n    overrides: {},\n  });\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n\t\t\t\t\t<TokenRegistryProvider>\n\t\t\t\t\t\t<WalletProvider>\n\t\t\t\t\t\t\t<BootstrapProvider>\n\t\t\t\t\t\t\t\t<HashRouter basename={'/'}>\n\t\t\t\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/\" component={MyNodePage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/stake\" component={MyNodePage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/lockup\" component={LockupPage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/multisig\" component={MultisigPage} />\n\t\t\t\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\t\t\t\tpath=\"/multisig/:address\"\n\t\t\t\t\t\t\t\t\t\t\tcomponent={MultisigInstancePage}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Layout>\n\t\t\t\t\t\t\t\t</HashRouter>\n\t\t\t\t\t\t\t</BootstrapProvider>\n\t\t\t\t\t\t</WalletProvider>\n\t\t\t\t\t</TokenRegistryProvider>\n        </SnackbarProvider>\n      </MuiThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport BN from \"bn.js\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { State as StoreState } from \"../../store/reducer\";\nimport { toDisplay } from \"../../utils/tokens\";\n\ntype Props = {\n  style?: any;\n  mint?: PublicKey | null;\n  decimals?: number;\n  variant?: \"outlined\" | \"standard\";\n  onChange: (from: PublicKey, maxAmount: BN) => void;\n};\n\nexport default function OwnedTokenAccountsSelect(p: Props) {\n  const { mint, decimals, variant, onChange, style } = p;\n  const ownedTokenAccounts = useSelector((state: StoreState) => {\n    if (!mint) {\n      return [];\n    }\n    return state.common.ownedTokenAccounts.filter(\n      (ota) => ota.account.mint.toString() === mint.toString()\n    );\n  });\n\n  const [fromAccount, setFromAccount] = useState(\"\");\n\n  return (\n    <Select\n      style={style}\n      variant={variant}\n      fullWidth\n      value={fromAccount}\n      onChange={(e) => {\n        const pk = e.target.value as string;\n        setFromAccount(pk);\n        const pubkey = new PublicKey(pk);\n        const token = ownedTokenAccounts\n          .filter((ota) => ota.publicKey.equals(pubkey))\n          .pop();\n        onChange(pubkey, new BN(token!.account.amount));\n      }}\n    >\n      {ownedTokenAccounts.length === 0 ? (\n        <MenuItem value={\"\"}>No token accounts found</MenuItem>\n      ) : (\n        ownedTokenAccounts.map((ownedTokenAccount) => {\n          return (\n            <MenuItem value={ownedTokenAccount.publicKey.toString()}>\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  overflow: \"hidden\",\n                }}\n              >\n                <div>{`${ownedTokenAccount.publicKey}`}</div>\n                {decimals && (\n                  <div style={{ float: \"right\", color: \"#ccc\" }}>{`${toDisplay(\n                    ownedTokenAccount.account.amount,\n                    decimals ?? 0\n                  )}`}</div>\n                )}\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n","import { PublicKey } from '@solana/web3.js';\n\ntype Networks = { [label: string]: Network };\n\nexport type Network = {\n  // Cluster.\n  label: string;\n  url: string;\n  explorerClusterSuffix: string;\n\n  // Faucets.\n  srmFaucet: PublicKey | null;\n  msrmFaucet: PublicKey | null;\n\n  // Programs.\n  registryProgramId: PublicKey;\n  lockupProgramId: PublicKey;\n  multisigProgramId: PublicKey;\n\n  // Staking instances.\n  registrars: { [token: string]: PublicKey };\n\n  // Whitelisted token mints.\n  mints: { [token: string]: PublicKey };\n};\n\nexport const networks: Networks = {\n  mainnet: {\n    // Cluster.\n    label: 'Mainnet Beta',\n    url: 'https://api.mainnet-beta.solana.com',\n    //url: 'https://api.mainnet-beta.solana.com',\n    explorerClusterSuffix: '',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n\n    registryProgramId: new PublicKey(\n      'GrAkKfEpTKQuVHG2Y97Y2FF4i7y7Q5AHLK94JBy7Y5yv',\n    ),\n    lockupProgramId: new PublicKey(\n      '6ebQNeTPZ1j7k3TtkCCtEPRvG7GQsucQrZ7sSEDQi9Ks',\n    ),\n    multisigProgramId: new PublicKey(\n      '3S6ALMCGVib4X3vVR3CLpm2K6Ng5qbWFYMTo5jfxWcEq',\n    ),\n    registrars: {\n      srm: new PublicKey('5vJRzKtcp4fJxqmR7qzajkaKSiAb6aT9grRsaZKXU222'),\n      msrm: new PublicKey('7uURiX2DwCpRuMFebKSkFtX9v5GK1Cd8nWLL8tyoyxZY'),\n      fida: new PublicKey('5C2ayX1E2SJ5kKEmDCA9ue9eeo3EPR34QFrhyzbbs3qh'),\n      dxl: new PublicKey('BQtp3xGPTFXJSt1MVKxtVSefRcBWmUkzTNM3g1t9efcK'),\n    },\n    mints: {\n      srm: new PublicKey('SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt'),\n      msrm: new PublicKey('MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L'),\n      fida: new PublicKey('EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp'),\n      dxl: new PublicKey('GsNzxJfFn6zQdJGeYsupJWzUAm57Ba7335mfhWvFiE9Z'),\n    },\n  },\n  devnet: {\n    // Cluster.\n    label: 'Devnet',\n    url: 'https://devnet.solana.com',\n    explorerClusterSuffix: 'devnet',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n    multisigProgramId: new PublicKey(\n      '9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz',\n    ),\n\n    registryProgramId: new PublicKey(\n      '65aMavjMw3EhmWKVCkGn1Uj2SqZ3XY4coJhYM1BVJTHw',\n    ),\n    lockupProgramId: new PublicKey(\n      'bRGMWZz4mzJ8NG8csn5QNTbJDv2973QSvppbfcAboje',\n    ),\n    registrars: {\n      token1: new PublicKey('EqbwcuvPWLZ5fav58HrieHmJEqTm6RPu5bmn5bBQJ3mu'),\n      token2: new PublicKey('2rDWuS6yVFQ3jYx1nQq7gs3HgzWLJcUwm9sTUBWuXuyK'),\n    },\n    mints: {\n      token1: new PublicKey('Ep6ASaHQ4gKiN3gWNRKYttZEQ7b82seMk9HWc5JNBJZP'),\n      token2: new PublicKey('5vWxJthWbCFuNSZj1qcP9WoU8E6UG3DUfeAoPvYoN8PQ'),\n    },\n  },\n\n  // Fill in with your local cluster addresses.\n  localhost: {\n    // Cluster.\n    label: 'Localhost',\n    url: 'http://localhost:8899',\n    explorerClusterSuffix: 'localhost',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n\n    multisigProgramId: new PublicKey(\n      '9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz',\n    ),\n    registryProgramId: new PublicKey(\n      'A3ukM9swAsTqVC6g5Zy9FsWXofe5f2JhXMEfzenNf9Q7',\n    ),\n    lockupProgramId: new PublicKey(\n      '2z65xTKJDM4iJBVz5aXtNrWfQvKGgNJvnqY1GL2mkimu',\n    ),\n    registrars: {\n      token1: new PublicKey('Fwi5pie2VgWTDUSRNkca1HdFCke5r3v3mY83JbxtC3CJ'),\n      token2: new PublicKey('9kCGBWgHzGGChvmAsmu5jrXwEShZfLxKRTmKdxEpFUBr'),\n    },\n    mints: {\n      token1: new PublicKey('2aE1pietadYMeDtdqKayS4SVo9W4xtC3U7SN4iGWCVcX'),\n      token2: new PublicKey('Cgan7PWyBH6Z7JNA6f9kDYgwBMZBxRexpdd29PJgnqah'),\n    },\n  },\n};\n"],"sourceRoot":""}